let Def = List { mapKey : Natural, mapValue : Text }

let Hex = { _hex : Text, def : List Def }

let Void = { _void : Text, def : Def }

let VoidList = { _void_list : Text, def : Def }

let Void/build =
        λ(val : Text)
      → { _void =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"void\" }"
        , def = [] : Def
        }

let VoidList/build =
        λ(val : List Text)
      → { _void_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"void\" }"
        , def = [] : Def
        }

let Void/hex =
        λ(val : Void)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"void\", \"value\": ${val._void} }"
        , def = val.def
        }

let Void/fromHex =
        λ(val : Hex)
      → { _void =
            "{ \"op\": \"fromHex\", \"type\": \"void\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Void/output =
        λ(id : Text)
      → λ(x : Void)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._void}, \"type\": \"void\" }"
        , def = x.def
        }

let VoidList/output =
        λ(id : Text)
      → λ(x : VoidList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._void_list}, \"type\": \"void\" }"
        , def = x.def
        }

let Hex = { _hex : Text, def : Def }

let HexList = { _hex_list : Text, def : Def }

let Hex/build =
        λ(val : Text)
      → { _hex =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"hex\" }"
        , def = [] : Def
        }

let HexList/build =
        λ(val : List Text)
      → { _hex_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"hex\" }"
        , def = [] : Def
        }

let Hex/hex =
        λ(val : Hex)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"hex\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Hex/fromHex =
        λ(val : Hex)
      → { _hex =
            "{ \"op\": \"fromHex\", \"type\": \"hex\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Hex/output =
        λ(id : Text)
      → λ(x : Hex)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._hex}, \"type\": \"hex\" }"
        , def = x.def
        }

let HexList/output =
        λ(id : Text)
      → λ(x : HexList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._hex_list}, \"type\": \"hex\" }"
        , def = x.def
        }

let Boolean = { _bool : Text, def : Def }

let BooleanList = { _bool_list : Text, def : Def }

let Boolean/build =
        λ(val : Bool)
      → { _bool =
            "{ \"op\": \"lit\", \"value\": \"${(   λ(b : Bool)
                                                 → if b then "true" else "false"
                                               )
                                                 val}\", \"type\": \"bool\" }"
        , def = [] : Def
        }

let BooleanList/build =
        λ(val : List Bool)
      → { _bool_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Bool
                                                     Text
                                                     (   λ(b : Bool)
                                                       →       if b

                                                         then  "true"

                                                         else  "false"
                                                     )
                                                     val
                                                 )} ], \"type\": \"bool\" }"
        , def = [] : Def
        }

let Boolean/hex =
        λ(val : Boolean)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bool\", \"value\": ${val._bool} }"
        , def = val.def
        }

let Boolean/fromHex =
        λ(val : Hex)
      → { _bool =
            "{ \"op\": \"fromHex\", \"type\": \"bool\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Boolean/output =
        λ(id : Text)
      → λ(x : Boolean)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bool}, \"type\": \"bool\" }"
        , def = x.def
        }

let BooleanList/output =
        λ(id : Text)
      → λ(x : BooleanList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bool_list}, \"type\": \"bool\" }"
        , def = x.def
        }

let Address = { _address : Text, def : Def }

let AddressList = { _address_list : Text, def : Def }

let Address/build =
        λ(val : Text)
      → { _address =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"address\" }"
        , def = [] : Def
        }

let AddressList/build =
        λ(val : List Text)
      → { _address_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"address\" }"
        , def = [] : Def
        }

let Address/hex =
        λ(val : Address)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"address\", \"value\": ${val._address} }"
        , def = val.def
        }

let Address/fromHex =
        λ(val : Hex)
      → { _address =
            "{ \"op\": \"fromHex\", \"type\": \"address\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Address/output =
        λ(id : Text)
      → λ(x : Address)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._address}, \"type\": \"address\" }"
        , def = x.def
        }

let AddressList/output =
        λ(id : Text)
      → λ(x : AddressList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._address_list}, \"type\": \"address\" }"
        , def = x.def
        }

let Bytes = { _bytes1 : Text, def : Def }

let BytesList = { _bytes1_list : Text, def : Def }

let Bytes/build =
        λ(val : Text)
      → { _bytes1 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes\" }"
        , def = [] : Def
        }

let BytesList/build =
        λ(val : List Text)
      → { _bytes1_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes\" }"
        , def = [] : Def
        }

let Bytes/hex =
        λ(val : Bytes)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes\", \"value\": ${val._bytes1} }"
        , def = val.def
        }

let Bytes/fromHex =
        λ(val : Hex)
      → { _bytes1 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes/output =
        λ(id : Text)
      → λ(x : Bytes)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes1}, \"type\": \"bytes\" }"
        , def = x.def
        }

let BytesList/output =
        λ(id : Text)
      → λ(x : BytesList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes1_list}, \"type\": \"bytes\" }"
        , def = x.def
        }

let Uint = { _uint256 : Text, def : Def }

let UintList = { _uint256_list : Text, def : Def }

let Uint/build =
        λ(val : Natural)
      → { _uint256 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint\" }"
        , def = [] : Def
        }

let UintList/build =
        λ(val : List Natural)
      → { _uint256_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint\" }"
        , def = [] : Def
        }

let Uint/hex =
        λ(val : Uint)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint\", \"value\": ${val._uint256} }"
        , def = val.def
        }

let Uint/fromHex =
        λ(val : Hex)
      → { _uint256 =
            "{ \"op\": \"fromHex\", \"type\": \"uint\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint/output =
        λ(id : Text)
      → λ(x : Uint)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint256}, \"type\": \"uint\" }"
        , def = x.def
        }

let UintList/output =
        λ(id : Text)
      → λ(x : UintList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint256_list}, \"type\": \"uint\" }"
        , def = x.def
        }

let Int = { _int256 : Text, def : Def }

let IntList = { _int256_list : Text, def : Def }

let Int/build =
        λ(val : Integer)
      → { _int256 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int\" }"
        , def = [] : Def
        }

let IntList/build =
        λ(val : List Integer)
      → { _int256_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int\" }"
        , def = [] : Def
        }

let Int/hex =
        λ(val : Int)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int\", \"value\": ${val._int256} }"
        , def = val.def
        }

let Int/fromHex =
        λ(val : Hex)
      → { _int256 =
            "{ \"op\": \"fromHex\", \"type\": \"int\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int/output =
        λ(id : Text)
      → λ(x : Int)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int256}, \"type\": \"int\" }"
        , def = x.def
        }

let IntList/output =
        λ(id : Text)
      → λ(x : IntList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int256_list}, \"type\": \"int\" }"
        , def = x.def
        }

let String = { _string : Text, def : Def }

let StringList = { _string_list : Text, def : Def }

let String/build =
        λ(val : Text)
      → { _string =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"string\" }"
        , def = [] : Def
        }

let StringList/build =
        λ(val : List Text)
      → { _string_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"string\" }"
        , def = [] : Def
        }

let String/hex =
        λ(val : String)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"string\", \"value\": ${val._string} }"
        , def = val.def
        }

let String/fromHex =
        λ(val : Hex)
      → { _string =
            "{ \"op\": \"fromHex\", \"type\": \"string\", \"value\": ${val._hex} }"
        , def = val.def
        }

let String/output =
        λ(id : Text)
      → λ(x : String)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._string}, \"type\": \"string\" }"
        , def = x.def
        }

let StringList/output =
        λ(id : Text)
      → λ(x : StringList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._string_list}, \"type\": \"string\" }"
        , def = x.def
        }

let Tuple = { _tuple : Text, def : Def }

let TupleList = { _tuple_list : Text, def : Def }

let Tuple/build =
        λ(val : Text)
      → { _tuple =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"tuple\" }"
        , def = [] : Def
        }

let TupleList/build =
        λ(val : List Text)
      → { _tuple_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"tuple\" }"
        , def = [] : Def
        }

let Tuple/hex =
        λ(val : Tuple)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"tuple\", \"value\": ${val._tuple} }"
        , def = val.def
        }

let Tuple/fromHex =
        λ(val : Hex)
      → { _tuple =
            "{ \"op\": \"fromHex\", \"type\": \"tuple\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Tuple/output =
        λ(id : Text)
      → λ(x : Tuple)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._tuple}, \"type\": \"tuple\" }"
        , def = x.def
        }

let TupleList/output =
        λ(id : Text)
      → λ(x : TupleList)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._tuple_list}, \"type\": \"tuple\" }"
        , def = x.def
        }

let Bytes1 = { _bytes1 : Text, def : Def }

let Bytes1List = { _bytes1_list : Text, def : Def }

let Bytes1/build =
        λ(val : Text)
      → { _bytes1 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes1\" }"
        , def = [] : Def
        }

let Bytes1List/build =
        λ(val : List Text)
      → { _bytes1_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes1\" }"
        , def = [] : Def
        }

let Bytes1/hex =
        λ(val : Bytes1)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes1\", \"value\": ${val._bytes1} }"
        , def = val.def
        }

let Bytes1/fromHex =
        λ(val : Hex)
      → { _bytes1 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes1\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes1/output =
        λ(id : Text)
      → λ(x : Bytes1)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes1}, \"type\": \"bytes1\" }"
        , def = x.def
        }

let Bytes1List/output =
        λ(id : Text)
      → λ(x : Bytes1List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes1_list}, \"type\": \"bytes1\" }"
        , def = x.def
        }

let Bytes2 = { _bytes2 : Text, def : Def }

let Bytes2List = { _bytes2_list : Text, def : Def }

let Bytes2/build =
        λ(val : Text)
      → { _bytes2 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes2\" }"
        , def = [] : Def
        }

let Bytes2List/build =
        λ(val : List Text)
      → { _bytes2_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes2\" }"
        , def = [] : Def
        }

let Bytes2/hex =
        λ(val : Bytes2)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes2\", \"value\": ${val._bytes2} }"
        , def = val.def
        }

let Bytes2/fromHex =
        λ(val : Hex)
      → { _bytes2 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes2\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes2/output =
        λ(id : Text)
      → λ(x : Bytes2)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes2}, \"type\": \"bytes2\" }"
        , def = x.def
        }

let Bytes2List/output =
        λ(id : Text)
      → λ(x : Bytes2List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes2_list}, \"type\": \"bytes2\" }"
        , def = x.def
        }

let Bytes3 = { _bytes3 : Text, def : Def }

let Bytes3List = { _bytes3_list : Text, def : Def }

let Bytes3/build =
        λ(val : Text)
      → { _bytes3 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes3\" }"
        , def = [] : Def
        }

let Bytes3List/build =
        λ(val : List Text)
      → { _bytes3_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes3\" }"
        , def = [] : Def
        }

let Bytes3/hex =
        λ(val : Bytes3)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes3\", \"value\": ${val._bytes3} }"
        , def = val.def
        }

let Bytes3/fromHex =
        λ(val : Hex)
      → { _bytes3 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes3\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes3/output =
        λ(id : Text)
      → λ(x : Bytes3)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes3}, \"type\": \"bytes3\" }"
        , def = x.def
        }

let Bytes3List/output =
        λ(id : Text)
      → λ(x : Bytes3List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes3_list}, \"type\": \"bytes3\" }"
        , def = x.def
        }

let Bytes4 = { _bytes4 : Text, def : Def }

let Bytes4List = { _bytes4_list : Text, def : Def }

let Bytes4/build =
        λ(val : Text)
      → { _bytes4 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes4\" }"
        , def = [] : Def
        }

let Bytes4List/build =
        λ(val : List Text)
      → { _bytes4_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes4\" }"
        , def = [] : Def
        }

let Bytes4/hex =
        λ(val : Bytes4)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes4\", \"value\": ${val._bytes4} }"
        , def = val.def
        }

let Bytes4/fromHex =
        λ(val : Hex)
      → { _bytes4 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes4\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes4/output =
        λ(id : Text)
      → λ(x : Bytes4)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes4}, \"type\": \"bytes4\" }"
        , def = x.def
        }

let Bytes4List/output =
        λ(id : Text)
      → λ(x : Bytes4List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes4_list}, \"type\": \"bytes4\" }"
        , def = x.def
        }

let Bytes5 = { _bytes5 : Text, def : Def }

let Bytes5List = { _bytes5_list : Text, def : Def }

let Bytes5/build =
        λ(val : Text)
      → { _bytes5 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes5\" }"
        , def = [] : Def
        }

let Bytes5List/build =
        λ(val : List Text)
      → { _bytes5_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes5\" }"
        , def = [] : Def
        }

let Bytes5/hex =
        λ(val : Bytes5)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes5\", \"value\": ${val._bytes5} }"
        , def = val.def
        }

let Bytes5/fromHex =
        λ(val : Hex)
      → { _bytes5 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes5\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes5/output =
        λ(id : Text)
      → λ(x : Bytes5)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes5}, \"type\": \"bytes5\" }"
        , def = x.def
        }

let Bytes5List/output =
        λ(id : Text)
      → λ(x : Bytes5List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes5_list}, \"type\": \"bytes5\" }"
        , def = x.def
        }

let Bytes6 = { _bytes6 : Text, def : Def }

let Bytes6List = { _bytes6_list : Text, def : Def }

let Bytes6/build =
        λ(val : Text)
      → { _bytes6 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes6\" }"
        , def = [] : Def
        }

let Bytes6List/build =
        λ(val : List Text)
      → { _bytes6_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes6\" }"
        , def = [] : Def
        }

let Bytes6/hex =
        λ(val : Bytes6)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes6\", \"value\": ${val._bytes6} }"
        , def = val.def
        }

let Bytes6/fromHex =
        λ(val : Hex)
      → { _bytes6 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes6\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes6/output =
        λ(id : Text)
      → λ(x : Bytes6)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes6}, \"type\": \"bytes6\" }"
        , def = x.def
        }

let Bytes6List/output =
        λ(id : Text)
      → λ(x : Bytes6List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes6_list}, \"type\": \"bytes6\" }"
        , def = x.def
        }

let Bytes7 = { _bytes7 : Text, def : Def }

let Bytes7List = { _bytes7_list : Text, def : Def }

let Bytes7/build =
        λ(val : Text)
      → { _bytes7 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes7\" }"
        , def = [] : Def
        }

let Bytes7List/build =
        λ(val : List Text)
      → { _bytes7_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes7\" }"
        , def = [] : Def
        }

let Bytes7/hex =
        λ(val : Bytes7)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes7\", \"value\": ${val._bytes7} }"
        , def = val.def
        }

let Bytes7/fromHex =
        λ(val : Hex)
      → { _bytes7 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes7\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes7/output =
        λ(id : Text)
      → λ(x : Bytes7)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes7}, \"type\": \"bytes7\" }"
        , def = x.def
        }

let Bytes7List/output =
        λ(id : Text)
      → λ(x : Bytes7List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes7_list}, \"type\": \"bytes7\" }"
        , def = x.def
        }

let Bytes8 = { _bytes8 : Text, def : Def }

let Bytes8List = { _bytes8_list : Text, def : Def }

let Bytes8/build =
        λ(val : Text)
      → { _bytes8 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes8\" }"
        , def = [] : Def
        }

let Bytes8List/build =
        λ(val : List Text)
      → { _bytes8_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes8\" }"
        , def = [] : Def
        }

let Bytes8/hex =
        λ(val : Bytes8)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes8\", \"value\": ${val._bytes8} }"
        , def = val.def
        }

let Bytes8/fromHex =
        λ(val : Hex)
      → { _bytes8 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes8\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes8/output =
        λ(id : Text)
      → λ(x : Bytes8)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes8}, \"type\": \"bytes8\" }"
        , def = x.def
        }

let Bytes8List/output =
        λ(id : Text)
      → λ(x : Bytes8List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes8_list}, \"type\": \"bytes8\" }"
        , def = x.def
        }

let Bytes9 = { _bytes9 : Text, def : Def }

let Bytes9List = { _bytes9_list : Text, def : Def }

let Bytes9/build =
        λ(val : Text)
      → { _bytes9 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes9\" }"
        , def = [] : Def
        }

let Bytes9List/build =
        λ(val : List Text)
      → { _bytes9_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes9\" }"
        , def = [] : Def
        }

let Bytes9/hex =
        λ(val : Bytes9)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes9\", \"value\": ${val._bytes9} }"
        , def = val.def
        }

let Bytes9/fromHex =
        λ(val : Hex)
      → { _bytes9 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes9\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes9/output =
        λ(id : Text)
      → λ(x : Bytes9)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes9}, \"type\": \"bytes9\" }"
        , def = x.def
        }

let Bytes9List/output =
        λ(id : Text)
      → λ(x : Bytes9List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes9_list}, \"type\": \"bytes9\" }"
        , def = x.def
        }

let Bytes10 = { _bytes10 : Text, def : Def }

let Bytes10List = { _bytes10_list : Text, def : Def }

let Bytes10/build =
        λ(val : Text)
      → { _bytes10 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes10\" }"
        , def = [] : Def
        }

let Bytes10List/build =
        λ(val : List Text)
      → { _bytes10_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes10\" }"
        , def = [] : Def
        }

let Bytes10/hex =
        λ(val : Bytes10)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes10\", \"value\": ${val._bytes10} }"
        , def = val.def
        }

let Bytes10/fromHex =
        λ(val : Hex)
      → { _bytes10 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes10\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes10/output =
        λ(id : Text)
      → λ(x : Bytes10)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes10}, \"type\": \"bytes10\" }"
        , def = x.def
        }

let Bytes10List/output =
        λ(id : Text)
      → λ(x : Bytes10List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes10_list}, \"type\": \"bytes10\" }"
        , def = x.def
        }

let Bytes11 = { _bytes11 : Text, def : Def }

let Bytes11List = { _bytes11_list : Text, def : Def }

let Bytes11/build =
        λ(val : Text)
      → { _bytes11 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes11\" }"
        , def = [] : Def
        }

let Bytes11List/build =
        λ(val : List Text)
      → { _bytes11_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes11\" }"
        , def = [] : Def
        }

let Bytes11/hex =
        λ(val : Bytes11)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes11\", \"value\": ${val._bytes11} }"
        , def = val.def
        }

let Bytes11/fromHex =
        λ(val : Hex)
      → { _bytes11 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes11\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes11/output =
        λ(id : Text)
      → λ(x : Bytes11)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes11}, \"type\": \"bytes11\" }"
        , def = x.def
        }

let Bytes11List/output =
        λ(id : Text)
      → λ(x : Bytes11List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes11_list}, \"type\": \"bytes11\" }"
        , def = x.def
        }

let Bytes12 = { _bytes12 : Text, def : Def }

let Bytes12List = { _bytes12_list : Text, def : Def }

let Bytes12/build =
        λ(val : Text)
      → { _bytes12 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes12\" }"
        , def = [] : Def
        }

let Bytes12List/build =
        λ(val : List Text)
      → { _bytes12_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes12\" }"
        , def = [] : Def
        }

let Bytes12/hex =
        λ(val : Bytes12)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes12\", \"value\": ${val._bytes12} }"
        , def = val.def
        }

let Bytes12/fromHex =
        λ(val : Hex)
      → { _bytes12 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes12\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes12/output =
        λ(id : Text)
      → λ(x : Bytes12)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes12}, \"type\": \"bytes12\" }"
        , def = x.def
        }

let Bytes12List/output =
        λ(id : Text)
      → λ(x : Bytes12List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes12_list}, \"type\": \"bytes12\" }"
        , def = x.def
        }

let Bytes13 = { _bytes13 : Text, def : Def }

let Bytes13List = { _bytes13_list : Text, def : Def }

let Bytes13/build =
        λ(val : Text)
      → { _bytes13 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes13\" }"
        , def = [] : Def
        }

let Bytes13List/build =
        λ(val : List Text)
      → { _bytes13_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes13\" }"
        , def = [] : Def
        }

let Bytes13/hex =
        λ(val : Bytes13)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes13\", \"value\": ${val._bytes13} }"
        , def = val.def
        }

let Bytes13/fromHex =
        λ(val : Hex)
      → { _bytes13 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes13\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes13/output =
        λ(id : Text)
      → λ(x : Bytes13)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes13}, \"type\": \"bytes13\" }"
        , def = x.def
        }

let Bytes13List/output =
        λ(id : Text)
      → λ(x : Bytes13List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes13_list}, \"type\": \"bytes13\" }"
        , def = x.def
        }

let Bytes14 = { _bytes14 : Text, def : Def }

let Bytes14List = { _bytes14_list : Text, def : Def }

let Bytes14/build =
        λ(val : Text)
      → { _bytes14 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes14\" }"
        , def = [] : Def
        }

let Bytes14List/build =
        λ(val : List Text)
      → { _bytes14_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes14\" }"
        , def = [] : Def
        }

let Bytes14/hex =
        λ(val : Bytes14)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes14\", \"value\": ${val._bytes14} }"
        , def = val.def
        }

let Bytes14/fromHex =
        λ(val : Hex)
      → { _bytes14 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes14\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes14/output =
        λ(id : Text)
      → λ(x : Bytes14)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes14}, \"type\": \"bytes14\" }"
        , def = x.def
        }

let Bytes14List/output =
        λ(id : Text)
      → λ(x : Bytes14List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes14_list}, \"type\": \"bytes14\" }"
        , def = x.def
        }

let Bytes15 = { _bytes15 : Text, def : Def }

let Bytes15List = { _bytes15_list : Text, def : Def }

let Bytes15/build =
        λ(val : Text)
      → { _bytes15 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes15\" }"
        , def = [] : Def
        }

let Bytes15List/build =
        λ(val : List Text)
      → { _bytes15_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes15\" }"
        , def = [] : Def
        }

let Bytes15/hex =
        λ(val : Bytes15)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes15\", \"value\": ${val._bytes15} }"
        , def = val.def
        }

let Bytes15/fromHex =
        λ(val : Hex)
      → { _bytes15 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes15\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes15/output =
        λ(id : Text)
      → λ(x : Bytes15)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes15}, \"type\": \"bytes15\" }"
        , def = x.def
        }

let Bytes15List/output =
        λ(id : Text)
      → λ(x : Bytes15List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes15_list}, \"type\": \"bytes15\" }"
        , def = x.def
        }

let Bytes16 = { _bytes16 : Text, def : Def }

let Bytes16List = { _bytes16_list : Text, def : Def }

let Bytes16/build =
        λ(val : Text)
      → { _bytes16 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes16\" }"
        , def = [] : Def
        }

let Bytes16List/build =
        λ(val : List Text)
      → { _bytes16_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes16\" }"
        , def = [] : Def
        }

let Bytes16/hex =
        λ(val : Bytes16)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes16\", \"value\": ${val._bytes16} }"
        , def = val.def
        }

let Bytes16/fromHex =
        λ(val : Hex)
      → { _bytes16 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes16\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes16/output =
        λ(id : Text)
      → λ(x : Bytes16)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes16}, \"type\": \"bytes16\" }"
        , def = x.def
        }

let Bytes16List/output =
        λ(id : Text)
      → λ(x : Bytes16List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes16_list}, \"type\": \"bytes16\" }"
        , def = x.def
        }

let Bytes17 = { _bytes17 : Text, def : Def }

let Bytes17List = { _bytes17_list : Text, def : Def }

let Bytes17/build =
        λ(val : Text)
      → { _bytes17 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes17\" }"
        , def = [] : Def
        }

let Bytes17List/build =
        λ(val : List Text)
      → { _bytes17_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes17\" }"
        , def = [] : Def
        }

let Bytes17/hex =
        λ(val : Bytes17)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes17\", \"value\": ${val._bytes17} }"
        , def = val.def
        }

let Bytes17/fromHex =
        λ(val : Hex)
      → { _bytes17 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes17\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes17/output =
        λ(id : Text)
      → λ(x : Bytes17)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes17}, \"type\": \"bytes17\" }"
        , def = x.def
        }

let Bytes17List/output =
        λ(id : Text)
      → λ(x : Bytes17List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes17_list}, \"type\": \"bytes17\" }"
        , def = x.def
        }

let Bytes18 = { _bytes18 : Text, def : Def }

let Bytes18List = { _bytes18_list : Text, def : Def }

let Bytes18/build =
        λ(val : Text)
      → { _bytes18 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes18\" }"
        , def = [] : Def
        }

let Bytes18List/build =
        λ(val : List Text)
      → { _bytes18_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes18\" }"
        , def = [] : Def
        }

let Bytes18/hex =
        λ(val : Bytes18)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes18\", \"value\": ${val._bytes18} }"
        , def = val.def
        }

let Bytes18/fromHex =
        λ(val : Hex)
      → { _bytes18 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes18\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes18/output =
        λ(id : Text)
      → λ(x : Bytes18)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes18}, \"type\": \"bytes18\" }"
        , def = x.def
        }

let Bytes18List/output =
        λ(id : Text)
      → λ(x : Bytes18List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes18_list}, \"type\": \"bytes18\" }"
        , def = x.def
        }

let Bytes19 = { _bytes19 : Text, def : Def }

let Bytes19List = { _bytes19_list : Text, def : Def }

let Bytes19/build =
        λ(val : Text)
      → { _bytes19 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes19\" }"
        , def = [] : Def
        }

let Bytes19List/build =
        λ(val : List Text)
      → { _bytes19_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes19\" }"
        , def = [] : Def
        }

let Bytes19/hex =
        λ(val : Bytes19)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes19\", \"value\": ${val._bytes19} }"
        , def = val.def
        }

let Bytes19/fromHex =
        λ(val : Hex)
      → { _bytes19 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes19\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes19/output =
        λ(id : Text)
      → λ(x : Bytes19)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes19}, \"type\": \"bytes19\" }"
        , def = x.def
        }

let Bytes19List/output =
        λ(id : Text)
      → λ(x : Bytes19List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes19_list}, \"type\": \"bytes19\" }"
        , def = x.def
        }

let Bytes20 = { _bytes20 : Text, def : Def }

let Bytes20List = { _bytes20_list : Text, def : Def }

let Bytes20/build =
        λ(val : Text)
      → { _bytes20 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes20\" }"
        , def = [] : Def
        }

let Bytes20List/build =
        λ(val : List Text)
      → { _bytes20_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes20\" }"
        , def = [] : Def
        }

let Bytes20/hex =
        λ(val : Bytes20)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes20\", \"value\": ${val._bytes20} }"
        , def = val.def
        }

let Bytes20/fromHex =
        λ(val : Hex)
      → { _bytes20 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes20\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes20/output =
        λ(id : Text)
      → λ(x : Bytes20)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes20}, \"type\": \"bytes20\" }"
        , def = x.def
        }

let Bytes20List/output =
        λ(id : Text)
      → λ(x : Bytes20List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes20_list}, \"type\": \"bytes20\" }"
        , def = x.def
        }

let Bytes21 = { _bytes21 : Text, def : Def }

let Bytes21List = { _bytes21_list : Text, def : Def }

let Bytes21/build =
        λ(val : Text)
      → { _bytes21 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes21\" }"
        , def = [] : Def
        }

let Bytes21List/build =
        λ(val : List Text)
      → { _bytes21_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes21\" }"
        , def = [] : Def
        }

let Bytes21/hex =
        λ(val : Bytes21)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes21\", \"value\": ${val._bytes21} }"
        , def = val.def
        }

let Bytes21/fromHex =
        λ(val : Hex)
      → { _bytes21 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes21\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes21/output =
        λ(id : Text)
      → λ(x : Bytes21)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes21}, \"type\": \"bytes21\" }"
        , def = x.def
        }

let Bytes21List/output =
        λ(id : Text)
      → λ(x : Bytes21List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes21_list}, \"type\": \"bytes21\" }"
        , def = x.def
        }

let Bytes22 = { _bytes22 : Text, def : Def }

let Bytes22List = { _bytes22_list : Text, def : Def }

let Bytes22/build =
        λ(val : Text)
      → { _bytes22 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes22\" }"
        , def = [] : Def
        }

let Bytes22List/build =
        λ(val : List Text)
      → { _bytes22_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes22\" }"
        , def = [] : Def
        }

let Bytes22/hex =
        λ(val : Bytes22)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes22\", \"value\": ${val._bytes22} }"
        , def = val.def
        }

let Bytes22/fromHex =
        λ(val : Hex)
      → { _bytes22 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes22\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes22/output =
        λ(id : Text)
      → λ(x : Bytes22)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes22}, \"type\": \"bytes22\" }"
        , def = x.def
        }

let Bytes22List/output =
        λ(id : Text)
      → λ(x : Bytes22List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes22_list}, \"type\": \"bytes22\" }"
        , def = x.def
        }

let Bytes23 = { _bytes23 : Text, def : Def }

let Bytes23List = { _bytes23_list : Text, def : Def }

let Bytes23/build =
        λ(val : Text)
      → { _bytes23 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes23\" }"
        , def = [] : Def
        }

let Bytes23List/build =
        λ(val : List Text)
      → { _bytes23_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes23\" }"
        , def = [] : Def
        }

let Bytes23/hex =
        λ(val : Bytes23)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes23\", \"value\": ${val._bytes23} }"
        , def = val.def
        }

let Bytes23/fromHex =
        λ(val : Hex)
      → { _bytes23 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes23\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes23/output =
        λ(id : Text)
      → λ(x : Bytes23)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes23}, \"type\": \"bytes23\" }"
        , def = x.def
        }

let Bytes23List/output =
        λ(id : Text)
      → λ(x : Bytes23List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes23_list}, \"type\": \"bytes23\" }"
        , def = x.def
        }

let Bytes24 = { _bytes24 : Text, def : Def }

let Bytes24List = { _bytes24_list : Text, def : Def }

let Bytes24/build =
        λ(val : Text)
      → { _bytes24 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes24\" }"
        , def = [] : Def
        }

let Bytes24List/build =
        λ(val : List Text)
      → { _bytes24_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes24\" }"
        , def = [] : Def
        }

let Bytes24/hex =
        λ(val : Bytes24)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes24\", \"value\": ${val._bytes24} }"
        , def = val.def
        }

let Bytes24/fromHex =
        λ(val : Hex)
      → { _bytes24 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes24\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes24/output =
        λ(id : Text)
      → λ(x : Bytes24)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes24}, \"type\": \"bytes24\" }"
        , def = x.def
        }

let Bytes24List/output =
        λ(id : Text)
      → λ(x : Bytes24List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes24_list}, \"type\": \"bytes24\" }"
        , def = x.def
        }

let Bytes25 = { _bytes25 : Text, def : Def }

let Bytes25List = { _bytes25_list : Text, def : Def }

let Bytes25/build =
        λ(val : Text)
      → { _bytes25 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes25\" }"
        , def = [] : Def
        }

let Bytes25List/build =
        λ(val : List Text)
      → { _bytes25_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes25\" }"
        , def = [] : Def
        }

let Bytes25/hex =
        λ(val : Bytes25)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes25\", \"value\": ${val._bytes25} }"
        , def = val.def
        }

let Bytes25/fromHex =
        λ(val : Hex)
      → { _bytes25 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes25\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes25/output =
        λ(id : Text)
      → λ(x : Bytes25)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes25}, \"type\": \"bytes25\" }"
        , def = x.def
        }

let Bytes25List/output =
        λ(id : Text)
      → λ(x : Bytes25List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes25_list}, \"type\": \"bytes25\" }"
        , def = x.def
        }

let Bytes26 = { _bytes26 : Text, def : Def }

let Bytes26List = { _bytes26_list : Text, def : Def }

let Bytes26/build =
        λ(val : Text)
      → { _bytes26 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes26\" }"
        , def = [] : Def
        }

let Bytes26List/build =
        λ(val : List Text)
      → { _bytes26_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes26\" }"
        , def = [] : Def
        }

let Bytes26/hex =
        λ(val : Bytes26)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes26\", \"value\": ${val._bytes26} }"
        , def = val.def
        }

let Bytes26/fromHex =
        λ(val : Hex)
      → { _bytes26 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes26\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes26/output =
        λ(id : Text)
      → λ(x : Bytes26)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes26}, \"type\": \"bytes26\" }"
        , def = x.def
        }

let Bytes26List/output =
        λ(id : Text)
      → λ(x : Bytes26List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes26_list}, \"type\": \"bytes26\" }"
        , def = x.def
        }

let Bytes27 = { _bytes27 : Text, def : Def }

let Bytes27List = { _bytes27_list : Text, def : Def }

let Bytes27/build =
        λ(val : Text)
      → { _bytes27 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes27\" }"
        , def = [] : Def
        }

let Bytes27List/build =
        λ(val : List Text)
      → { _bytes27_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes27\" }"
        , def = [] : Def
        }

let Bytes27/hex =
        λ(val : Bytes27)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes27\", \"value\": ${val._bytes27} }"
        , def = val.def
        }

let Bytes27/fromHex =
        λ(val : Hex)
      → { _bytes27 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes27\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes27/output =
        λ(id : Text)
      → λ(x : Bytes27)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes27}, \"type\": \"bytes27\" }"
        , def = x.def
        }

let Bytes27List/output =
        λ(id : Text)
      → λ(x : Bytes27List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes27_list}, \"type\": \"bytes27\" }"
        , def = x.def
        }

let Bytes28 = { _bytes28 : Text, def : Def }

let Bytes28List = { _bytes28_list : Text, def : Def }

let Bytes28/build =
        λ(val : Text)
      → { _bytes28 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes28\" }"
        , def = [] : Def
        }

let Bytes28List/build =
        λ(val : List Text)
      → { _bytes28_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes28\" }"
        , def = [] : Def
        }

let Bytes28/hex =
        λ(val : Bytes28)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes28\", \"value\": ${val._bytes28} }"
        , def = val.def
        }

let Bytes28/fromHex =
        λ(val : Hex)
      → { _bytes28 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes28\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes28/output =
        λ(id : Text)
      → λ(x : Bytes28)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes28}, \"type\": \"bytes28\" }"
        , def = x.def
        }

let Bytes28List/output =
        λ(id : Text)
      → λ(x : Bytes28List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes28_list}, \"type\": \"bytes28\" }"
        , def = x.def
        }

let Bytes29 = { _bytes29 : Text, def : Def }

let Bytes29List = { _bytes29_list : Text, def : Def }

let Bytes29/build =
        λ(val : Text)
      → { _bytes29 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes29\" }"
        , def = [] : Def
        }

let Bytes29List/build =
        λ(val : List Text)
      → { _bytes29_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes29\" }"
        , def = [] : Def
        }

let Bytes29/hex =
        λ(val : Bytes29)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes29\", \"value\": ${val._bytes29} }"
        , def = val.def
        }

let Bytes29/fromHex =
        λ(val : Hex)
      → { _bytes29 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes29\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes29/output =
        λ(id : Text)
      → λ(x : Bytes29)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes29}, \"type\": \"bytes29\" }"
        , def = x.def
        }

let Bytes29List/output =
        λ(id : Text)
      → λ(x : Bytes29List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes29_list}, \"type\": \"bytes29\" }"
        , def = x.def
        }

let Bytes30 = { _bytes30 : Text, def : Def }

let Bytes30List = { _bytes30_list : Text, def : Def }

let Bytes30/build =
        λ(val : Text)
      → { _bytes30 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes30\" }"
        , def = [] : Def
        }

let Bytes30List/build =
        λ(val : List Text)
      → { _bytes30_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes30\" }"
        , def = [] : Def
        }

let Bytes30/hex =
        λ(val : Bytes30)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes30\", \"value\": ${val._bytes30} }"
        , def = val.def
        }

let Bytes30/fromHex =
        λ(val : Hex)
      → { _bytes30 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes30\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes30/output =
        λ(id : Text)
      → λ(x : Bytes30)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes30}, \"type\": \"bytes30\" }"
        , def = x.def
        }

let Bytes30List/output =
        λ(id : Text)
      → λ(x : Bytes30List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes30_list}, \"type\": \"bytes30\" }"
        , def = x.def
        }

let Bytes31 = { _bytes31 : Text, def : Def }

let Bytes31List = { _bytes31_list : Text, def : Def }

let Bytes31/build =
        λ(val : Text)
      → { _bytes31 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes31\" }"
        , def = [] : Def
        }

let Bytes31List/build =
        λ(val : List Text)
      → { _bytes31_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes31\" }"
        , def = [] : Def
        }

let Bytes31/hex =
        λ(val : Bytes31)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes31\", \"value\": ${val._bytes31} }"
        , def = val.def
        }

let Bytes31/fromHex =
        λ(val : Hex)
      → { _bytes31 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes31\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes31/output =
        λ(id : Text)
      → λ(x : Bytes31)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes31}, \"type\": \"bytes31\" }"
        , def = x.def
        }

let Bytes31List/output =
        λ(id : Text)
      → λ(x : Bytes31List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes31_list}, \"type\": \"bytes31\" }"
        , def = x.def
        }

let Bytes32 = { _bytes32 : Text, def : Def }

let Bytes32List = { _bytes32_list : Text, def : Def }

let Bytes32/build =
        λ(val : Text)
      → { _bytes32 =
            "{ \"op\": \"lit\", \"value\": \"${(λ(x : Text) → x)
                                                 val}\", \"type\": \"bytes32\" }"
        , def = [] : Def
        }

let Bytes32List/build =
        λ(val : List Text)
      → { _bytes32_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Text
                                                     Text
                                                     (λ(x : Text) → x)
                                                     val
                                                 )} ], \"type\": \"bytes32\" }"
        , def = [] : Def
        }

let Bytes32/hex =
        λ(val : Bytes32)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"bytes32\", \"value\": ${val._bytes32} }"
        , def = val.def
        }

let Bytes32/fromHex =
        λ(val : Hex)
      → { _bytes32 =
            "{ \"op\": \"fromHex\", \"type\": \"bytes32\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Bytes32/output =
        λ(id : Text)
      → λ(x : Bytes32)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes32}, \"type\": \"bytes32\" }"
        , def = x.def
        }

let Bytes32List/output =
        λ(id : Text)
      → λ(x : Bytes32List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._bytes32_list}, \"type\": \"bytes32\" }"
        , def = x.def
        }

let Uint8 = { _uint8 : Text, def : Def }

let Uint8List = { _uint8_list : Text, def : Def }

let Uint8/build =
        λ(val : Natural)
      → { _uint8 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint8\" }"
        , def = [] : Def
        }

let Uint8List/build =
        λ(val : List Natural)
      → { _uint8_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint8\" }"
        , def = [] : Def
        }

let Uint8/hex =
        λ(val : Uint8)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint8\", \"value\": ${val._uint8} }"
        , def = val.def
        }

let Uint8/fromHex =
        λ(val : Hex)
      → { _uint8 =
            "{ \"op\": \"fromHex\", \"type\": \"uint8\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint8/output =
        λ(id : Text)
      → λ(x : Uint8)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint8}, \"type\": \"uint8\" }"
        , def = x.def
        }

let Uint8List/output =
        λ(id : Text)
      → λ(x : Uint8List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint8_list}, \"type\": \"uint8\" }"
        , def = x.def
        }

let Uint16 = { _uint16 : Text, def : Def }

let Uint16List = { _uint16_list : Text, def : Def }

let Uint16/build =
        λ(val : Natural)
      → { _uint16 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint16\" }"
        , def = [] : Def
        }

let Uint16List/build =
        λ(val : List Natural)
      → { _uint16_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint16\" }"
        , def = [] : Def
        }

let Uint16/hex =
        λ(val : Uint16)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint16\", \"value\": ${val._uint16} }"
        , def = val.def
        }

let Uint16/fromHex =
        λ(val : Hex)
      → { _uint16 =
            "{ \"op\": \"fromHex\", \"type\": \"uint16\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint16/output =
        λ(id : Text)
      → λ(x : Uint16)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint16}, \"type\": \"uint16\" }"
        , def = x.def
        }

let Uint16List/output =
        λ(id : Text)
      → λ(x : Uint16List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint16_list}, \"type\": \"uint16\" }"
        , def = x.def
        }

let Uint24 = { _uint24 : Text, def : Def }

let Uint24List = { _uint24_list : Text, def : Def }

let Uint24/build =
        λ(val : Natural)
      → { _uint24 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint24\" }"
        , def = [] : Def
        }

let Uint24List/build =
        λ(val : List Natural)
      → { _uint24_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint24\" }"
        , def = [] : Def
        }

let Uint24/hex =
        λ(val : Uint24)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint24\", \"value\": ${val._uint24} }"
        , def = val.def
        }

let Uint24/fromHex =
        λ(val : Hex)
      → { _uint24 =
            "{ \"op\": \"fromHex\", \"type\": \"uint24\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint24/output =
        λ(id : Text)
      → λ(x : Uint24)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint24}, \"type\": \"uint24\" }"
        , def = x.def
        }

let Uint24List/output =
        λ(id : Text)
      → λ(x : Uint24List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint24_list}, \"type\": \"uint24\" }"
        , def = x.def
        }

let Uint32 = { _uint32 : Text, def : Def }

let Uint32List = { _uint32_list : Text, def : Def }

let Uint32/build =
        λ(val : Natural)
      → { _uint32 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint32\" }"
        , def = [] : Def
        }

let Uint32List/build =
        λ(val : List Natural)
      → { _uint32_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint32\" }"
        , def = [] : Def
        }

let Uint32/hex =
        λ(val : Uint32)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint32\", \"value\": ${val._uint32} }"
        , def = val.def
        }

let Uint32/fromHex =
        λ(val : Hex)
      → { _uint32 =
            "{ \"op\": \"fromHex\", \"type\": \"uint32\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint32/output =
        λ(id : Text)
      → λ(x : Uint32)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint32}, \"type\": \"uint32\" }"
        , def = x.def
        }

let Uint32List/output =
        λ(id : Text)
      → λ(x : Uint32List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint32_list}, \"type\": \"uint32\" }"
        , def = x.def
        }

let Uint40 = { _uint40 : Text, def : Def }

let Uint40List = { _uint40_list : Text, def : Def }

let Uint40/build =
        λ(val : Natural)
      → { _uint40 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint40\" }"
        , def = [] : Def
        }

let Uint40List/build =
        λ(val : List Natural)
      → { _uint40_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint40\" }"
        , def = [] : Def
        }

let Uint40/hex =
        λ(val : Uint40)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint40\", \"value\": ${val._uint40} }"
        , def = val.def
        }

let Uint40/fromHex =
        λ(val : Hex)
      → { _uint40 =
            "{ \"op\": \"fromHex\", \"type\": \"uint40\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint40/output =
        λ(id : Text)
      → λ(x : Uint40)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint40}, \"type\": \"uint40\" }"
        , def = x.def
        }

let Uint40List/output =
        λ(id : Text)
      → λ(x : Uint40List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint40_list}, \"type\": \"uint40\" }"
        , def = x.def
        }

let Uint48 = { _uint48 : Text, def : Def }

let Uint48List = { _uint48_list : Text, def : Def }

let Uint48/build =
        λ(val : Natural)
      → { _uint48 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint48\" }"
        , def = [] : Def
        }

let Uint48List/build =
        λ(val : List Natural)
      → { _uint48_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint48\" }"
        , def = [] : Def
        }

let Uint48/hex =
        λ(val : Uint48)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint48\", \"value\": ${val._uint48} }"
        , def = val.def
        }

let Uint48/fromHex =
        λ(val : Hex)
      → { _uint48 =
            "{ \"op\": \"fromHex\", \"type\": \"uint48\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint48/output =
        λ(id : Text)
      → λ(x : Uint48)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint48}, \"type\": \"uint48\" }"
        , def = x.def
        }

let Uint48List/output =
        λ(id : Text)
      → λ(x : Uint48List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint48_list}, \"type\": \"uint48\" }"
        , def = x.def
        }

let Uint56 = { _uint56 : Text, def : Def }

let Uint56List = { _uint56_list : Text, def : Def }

let Uint56/build =
        λ(val : Natural)
      → { _uint56 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint56\" }"
        , def = [] : Def
        }

let Uint56List/build =
        λ(val : List Natural)
      → { _uint56_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint56\" }"
        , def = [] : Def
        }

let Uint56/hex =
        λ(val : Uint56)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint56\", \"value\": ${val._uint56} }"
        , def = val.def
        }

let Uint56/fromHex =
        λ(val : Hex)
      → { _uint56 =
            "{ \"op\": \"fromHex\", \"type\": \"uint56\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint56/output =
        λ(id : Text)
      → λ(x : Uint56)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint56}, \"type\": \"uint56\" }"
        , def = x.def
        }

let Uint56List/output =
        λ(id : Text)
      → λ(x : Uint56List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint56_list}, \"type\": \"uint56\" }"
        , def = x.def
        }

let Uint64 = { _uint64 : Text, def : Def }

let Uint64List = { _uint64_list : Text, def : Def }

let Uint64/build =
        λ(val : Natural)
      → { _uint64 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint64\" }"
        , def = [] : Def
        }

let Uint64List/build =
        λ(val : List Natural)
      → { _uint64_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint64\" }"
        , def = [] : Def
        }

let Uint64/hex =
        λ(val : Uint64)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint64\", \"value\": ${val._uint64} }"
        , def = val.def
        }

let Uint64/fromHex =
        λ(val : Hex)
      → { _uint64 =
            "{ \"op\": \"fromHex\", \"type\": \"uint64\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint64/output =
        λ(id : Text)
      → λ(x : Uint64)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint64}, \"type\": \"uint64\" }"
        , def = x.def
        }

let Uint64List/output =
        λ(id : Text)
      → λ(x : Uint64List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint64_list}, \"type\": \"uint64\" }"
        , def = x.def
        }

let Uint72 = { _uint72 : Text, def : Def }

let Uint72List = { _uint72_list : Text, def : Def }

let Uint72/build =
        λ(val : Natural)
      → { _uint72 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint72\" }"
        , def = [] : Def
        }

let Uint72List/build =
        λ(val : List Natural)
      → { _uint72_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint72\" }"
        , def = [] : Def
        }

let Uint72/hex =
        λ(val : Uint72)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint72\", \"value\": ${val._uint72} }"
        , def = val.def
        }

let Uint72/fromHex =
        λ(val : Hex)
      → { _uint72 =
            "{ \"op\": \"fromHex\", \"type\": \"uint72\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint72/output =
        λ(id : Text)
      → λ(x : Uint72)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint72}, \"type\": \"uint72\" }"
        , def = x.def
        }

let Uint72List/output =
        λ(id : Text)
      → λ(x : Uint72List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint72_list}, \"type\": \"uint72\" }"
        , def = x.def
        }

let Uint80 = { _uint80 : Text, def : Def }

let Uint80List = { _uint80_list : Text, def : Def }

let Uint80/build =
        λ(val : Natural)
      → { _uint80 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint80\" }"
        , def = [] : Def
        }

let Uint80List/build =
        λ(val : List Natural)
      → { _uint80_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint80\" }"
        , def = [] : Def
        }

let Uint80/hex =
        λ(val : Uint80)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint80\", \"value\": ${val._uint80} }"
        , def = val.def
        }

let Uint80/fromHex =
        λ(val : Hex)
      → { _uint80 =
            "{ \"op\": \"fromHex\", \"type\": \"uint80\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint80/output =
        λ(id : Text)
      → λ(x : Uint80)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint80}, \"type\": \"uint80\" }"
        , def = x.def
        }

let Uint80List/output =
        λ(id : Text)
      → λ(x : Uint80List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint80_list}, \"type\": \"uint80\" }"
        , def = x.def
        }

let Uint88 = { _uint88 : Text, def : Def }

let Uint88List = { _uint88_list : Text, def : Def }

let Uint88/build =
        λ(val : Natural)
      → { _uint88 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint88\" }"
        , def = [] : Def
        }

let Uint88List/build =
        λ(val : List Natural)
      → { _uint88_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint88\" }"
        , def = [] : Def
        }

let Uint88/hex =
        λ(val : Uint88)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint88\", \"value\": ${val._uint88} }"
        , def = val.def
        }

let Uint88/fromHex =
        λ(val : Hex)
      → { _uint88 =
            "{ \"op\": \"fromHex\", \"type\": \"uint88\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint88/output =
        λ(id : Text)
      → λ(x : Uint88)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint88}, \"type\": \"uint88\" }"
        , def = x.def
        }

let Uint88List/output =
        λ(id : Text)
      → λ(x : Uint88List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint88_list}, \"type\": \"uint88\" }"
        , def = x.def
        }

let Uint96 = { _uint96 : Text, def : Def }

let Uint96List = { _uint96_list : Text, def : Def }

let Uint96/build =
        λ(val : Natural)
      → { _uint96 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint96\" }"
        , def = [] : Def
        }

let Uint96List/build =
        λ(val : List Natural)
      → { _uint96_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint96\" }"
        , def = [] : Def
        }

let Uint96/hex =
        λ(val : Uint96)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint96\", \"value\": ${val._uint96} }"
        , def = val.def
        }

let Uint96/fromHex =
        λ(val : Hex)
      → { _uint96 =
            "{ \"op\": \"fromHex\", \"type\": \"uint96\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint96/output =
        λ(id : Text)
      → λ(x : Uint96)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint96}, \"type\": \"uint96\" }"
        , def = x.def
        }

let Uint96List/output =
        λ(id : Text)
      → λ(x : Uint96List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint96_list}, \"type\": \"uint96\" }"
        , def = x.def
        }

let Uint104 = { _uint104 : Text, def : Def }

let Uint104List = { _uint104_list : Text, def : Def }

let Uint104/build =
        λ(val : Natural)
      → { _uint104 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint104\" }"
        , def = [] : Def
        }

let Uint104List/build =
        λ(val : List Natural)
      → { _uint104_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint104\" }"
        , def = [] : Def
        }

let Uint104/hex =
        λ(val : Uint104)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint104\", \"value\": ${val._uint104} }"
        , def = val.def
        }

let Uint104/fromHex =
        λ(val : Hex)
      → { _uint104 =
            "{ \"op\": \"fromHex\", \"type\": \"uint104\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint104/output =
        λ(id : Text)
      → λ(x : Uint104)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint104}, \"type\": \"uint104\" }"
        , def = x.def
        }

let Uint104List/output =
        λ(id : Text)
      → λ(x : Uint104List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint104_list}, \"type\": \"uint104\" }"
        , def = x.def
        }

let Uint112 = { _uint112 : Text, def : Def }

let Uint112List = { _uint112_list : Text, def : Def }

let Uint112/build =
        λ(val : Natural)
      → { _uint112 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint112\" }"
        , def = [] : Def
        }

let Uint112List/build =
        λ(val : List Natural)
      → { _uint112_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint112\" }"
        , def = [] : Def
        }

let Uint112/hex =
        λ(val : Uint112)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint112\", \"value\": ${val._uint112} }"
        , def = val.def
        }

let Uint112/fromHex =
        λ(val : Hex)
      → { _uint112 =
            "{ \"op\": \"fromHex\", \"type\": \"uint112\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint112/output =
        λ(id : Text)
      → λ(x : Uint112)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint112}, \"type\": \"uint112\" }"
        , def = x.def
        }

let Uint112List/output =
        λ(id : Text)
      → λ(x : Uint112List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint112_list}, \"type\": \"uint112\" }"
        , def = x.def
        }

let Uint120 = { _uint120 : Text, def : Def }

let Uint120List = { _uint120_list : Text, def : Def }

let Uint120/build =
        λ(val : Natural)
      → { _uint120 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint120\" }"
        , def = [] : Def
        }

let Uint120List/build =
        λ(val : List Natural)
      → { _uint120_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint120\" }"
        , def = [] : Def
        }

let Uint120/hex =
        λ(val : Uint120)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint120\", \"value\": ${val._uint120} }"
        , def = val.def
        }

let Uint120/fromHex =
        λ(val : Hex)
      → { _uint120 =
            "{ \"op\": \"fromHex\", \"type\": \"uint120\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint120/output =
        λ(id : Text)
      → λ(x : Uint120)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint120}, \"type\": \"uint120\" }"
        , def = x.def
        }

let Uint120List/output =
        λ(id : Text)
      → λ(x : Uint120List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint120_list}, \"type\": \"uint120\" }"
        , def = x.def
        }

let Uint128 = { _uint128 : Text, def : Def }

let Uint128List = { _uint128_list : Text, def : Def }

let Uint128/build =
        λ(val : Natural)
      → { _uint128 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint128\" }"
        , def = [] : Def
        }

let Uint128List/build =
        λ(val : List Natural)
      → { _uint128_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint128\" }"
        , def = [] : Def
        }

let Uint128/hex =
        λ(val : Uint128)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint128\", \"value\": ${val._uint128} }"
        , def = val.def
        }

let Uint128/fromHex =
        λ(val : Hex)
      → { _uint128 =
            "{ \"op\": \"fromHex\", \"type\": \"uint128\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint128/output =
        λ(id : Text)
      → λ(x : Uint128)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint128}, \"type\": \"uint128\" }"
        , def = x.def
        }

let Uint128List/output =
        λ(id : Text)
      → λ(x : Uint128List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint128_list}, \"type\": \"uint128\" }"
        , def = x.def
        }

let Uint136 = { _uint136 : Text, def : Def }

let Uint136List = { _uint136_list : Text, def : Def }

let Uint136/build =
        λ(val : Natural)
      → { _uint136 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint136\" }"
        , def = [] : Def
        }

let Uint136List/build =
        λ(val : List Natural)
      → { _uint136_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint136\" }"
        , def = [] : Def
        }

let Uint136/hex =
        λ(val : Uint136)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint136\", \"value\": ${val._uint136} }"
        , def = val.def
        }

let Uint136/fromHex =
        λ(val : Hex)
      → { _uint136 =
            "{ \"op\": \"fromHex\", \"type\": \"uint136\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint136/output =
        λ(id : Text)
      → λ(x : Uint136)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint136}, \"type\": \"uint136\" }"
        , def = x.def
        }

let Uint136List/output =
        λ(id : Text)
      → λ(x : Uint136List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint136_list}, \"type\": \"uint136\" }"
        , def = x.def
        }

let Uint144 = { _uint144 : Text, def : Def }

let Uint144List = { _uint144_list : Text, def : Def }

let Uint144/build =
        λ(val : Natural)
      → { _uint144 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint144\" }"
        , def = [] : Def
        }

let Uint144List/build =
        λ(val : List Natural)
      → { _uint144_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint144\" }"
        , def = [] : Def
        }

let Uint144/hex =
        λ(val : Uint144)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint144\", \"value\": ${val._uint144} }"
        , def = val.def
        }

let Uint144/fromHex =
        λ(val : Hex)
      → { _uint144 =
            "{ \"op\": \"fromHex\", \"type\": \"uint144\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint144/output =
        λ(id : Text)
      → λ(x : Uint144)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint144}, \"type\": \"uint144\" }"
        , def = x.def
        }

let Uint144List/output =
        λ(id : Text)
      → λ(x : Uint144List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint144_list}, \"type\": \"uint144\" }"
        , def = x.def
        }

let Uint152 = { _uint152 : Text, def : Def }

let Uint152List = { _uint152_list : Text, def : Def }

let Uint152/build =
        λ(val : Natural)
      → { _uint152 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint152\" }"
        , def = [] : Def
        }

let Uint152List/build =
        λ(val : List Natural)
      → { _uint152_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint152\" }"
        , def = [] : Def
        }

let Uint152/hex =
        λ(val : Uint152)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint152\", \"value\": ${val._uint152} }"
        , def = val.def
        }

let Uint152/fromHex =
        λ(val : Hex)
      → { _uint152 =
            "{ \"op\": \"fromHex\", \"type\": \"uint152\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint152/output =
        λ(id : Text)
      → λ(x : Uint152)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint152}, \"type\": \"uint152\" }"
        , def = x.def
        }

let Uint152List/output =
        λ(id : Text)
      → λ(x : Uint152List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint152_list}, \"type\": \"uint152\" }"
        , def = x.def
        }

let Uint160 = { _uint160 : Text, def : Def }

let Uint160List = { _uint160_list : Text, def : Def }

let Uint160/build =
        λ(val : Natural)
      → { _uint160 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint160\" }"
        , def = [] : Def
        }

let Uint160List/build =
        λ(val : List Natural)
      → { _uint160_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint160\" }"
        , def = [] : Def
        }

let Uint160/hex =
        λ(val : Uint160)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint160\", \"value\": ${val._uint160} }"
        , def = val.def
        }

let Uint160/fromHex =
        λ(val : Hex)
      → { _uint160 =
            "{ \"op\": \"fromHex\", \"type\": \"uint160\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint160/output =
        λ(id : Text)
      → λ(x : Uint160)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint160}, \"type\": \"uint160\" }"
        , def = x.def
        }

let Uint160List/output =
        λ(id : Text)
      → λ(x : Uint160List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint160_list}, \"type\": \"uint160\" }"
        , def = x.def
        }

let Uint168 = { _uint168 : Text, def : Def }

let Uint168List = { _uint168_list : Text, def : Def }

let Uint168/build =
        λ(val : Natural)
      → { _uint168 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint168\" }"
        , def = [] : Def
        }

let Uint168List/build =
        λ(val : List Natural)
      → { _uint168_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint168\" }"
        , def = [] : Def
        }

let Uint168/hex =
        λ(val : Uint168)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint168\", \"value\": ${val._uint168} }"
        , def = val.def
        }

let Uint168/fromHex =
        λ(val : Hex)
      → { _uint168 =
            "{ \"op\": \"fromHex\", \"type\": \"uint168\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint168/output =
        λ(id : Text)
      → λ(x : Uint168)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint168}, \"type\": \"uint168\" }"
        , def = x.def
        }

let Uint168List/output =
        λ(id : Text)
      → λ(x : Uint168List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint168_list}, \"type\": \"uint168\" }"
        , def = x.def
        }

let Uint176 = { _uint176 : Text, def : Def }

let Uint176List = { _uint176_list : Text, def : Def }

let Uint176/build =
        λ(val : Natural)
      → { _uint176 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint176\" }"
        , def = [] : Def
        }

let Uint176List/build =
        λ(val : List Natural)
      → { _uint176_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint176\" }"
        , def = [] : Def
        }

let Uint176/hex =
        λ(val : Uint176)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint176\", \"value\": ${val._uint176} }"
        , def = val.def
        }

let Uint176/fromHex =
        λ(val : Hex)
      → { _uint176 =
            "{ \"op\": \"fromHex\", \"type\": \"uint176\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint176/output =
        λ(id : Text)
      → λ(x : Uint176)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint176}, \"type\": \"uint176\" }"
        , def = x.def
        }

let Uint176List/output =
        λ(id : Text)
      → λ(x : Uint176List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint176_list}, \"type\": \"uint176\" }"
        , def = x.def
        }

let Uint184 = { _uint184 : Text, def : Def }

let Uint184List = { _uint184_list : Text, def : Def }

let Uint184/build =
        λ(val : Natural)
      → { _uint184 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint184\" }"
        , def = [] : Def
        }

let Uint184List/build =
        λ(val : List Natural)
      → { _uint184_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint184\" }"
        , def = [] : Def
        }

let Uint184/hex =
        λ(val : Uint184)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint184\", \"value\": ${val._uint184} }"
        , def = val.def
        }

let Uint184/fromHex =
        λ(val : Hex)
      → { _uint184 =
            "{ \"op\": \"fromHex\", \"type\": \"uint184\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint184/output =
        λ(id : Text)
      → λ(x : Uint184)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint184}, \"type\": \"uint184\" }"
        , def = x.def
        }

let Uint184List/output =
        λ(id : Text)
      → λ(x : Uint184List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint184_list}, \"type\": \"uint184\" }"
        , def = x.def
        }

let Uint192 = { _uint192 : Text, def : Def }

let Uint192List = { _uint192_list : Text, def : Def }

let Uint192/build =
        λ(val : Natural)
      → { _uint192 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint192\" }"
        , def = [] : Def
        }

let Uint192List/build =
        λ(val : List Natural)
      → { _uint192_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint192\" }"
        , def = [] : Def
        }

let Uint192/hex =
        λ(val : Uint192)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint192\", \"value\": ${val._uint192} }"
        , def = val.def
        }

let Uint192/fromHex =
        λ(val : Hex)
      → { _uint192 =
            "{ \"op\": \"fromHex\", \"type\": \"uint192\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint192/output =
        λ(id : Text)
      → λ(x : Uint192)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint192}, \"type\": \"uint192\" }"
        , def = x.def
        }

let Uint192List/output =
        λ(id : Text)
      → λ(x : Uint192List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint192_list}, \"type\": \"uint192\" }"
        , def = x.def
        }

let Uint200 = { _uint200 : Text, def : Def }

let Uint200List = { _uint200_list : Text, def : Def }

let Uint200/build =
        λ(val : Natural)
      → { _uint200 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint200\" }"
        , def = [] : Def
        }

let Uint200List/build =
        λ(val : List Natural)
      → { _uint200_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint200\" }"
        , def = [] : Def
        }

let Uint200/hex =
        λ(val : Uint200)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint200\", \"value\": ${val._uint200} }"
        , def = val.def
        }

let Uint200/fromHex =
        λ(val : Hex)
      → { _uint200 =
            "{ \"op\": \"fromHex\", \"type\": \"uint200\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint200/output =
        λ(id : Text)
      → λ(x : Uint200)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint200}, \"type\": \"uint200\" }"
        , def = x.def
        }

let Uint200List/output =
        λ(id : Text)
      → λ(x : Uint200List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint200_list}, \"type\": \"uint200\" }"
        , def = x.def
        }

let Uint208 = { _uint208 : Text, def : Def }

let Uint208List = { _uint208_list : Text, def : Def }

let Uint208/build =
        λ(val : Natural)
      → { _uint208 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint208\" }"
        , def = [] : Def
        }

let Uint208List/build =
        λ(val : List Natural)
      → { _uint208_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint208\" }"
        , def = [] : Def
        }

let Uint208/hex =
        λ(val : Uint208)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint208\", \"value\": ${val._uint208} }"
        , def = val.def
        }

let Uint208/fromHex =
        λ(val : Hex)
      → { _uint208 =
            "{ \"op\": \"fromHex\", \"type\": \"uint208\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint208/output =
        λ(id : Text)
      → λ(x : Uint208)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint208}, \"type\": \"uint208\" }"
        , def = x.def
        }

let Uint208List/output =
        λ(id : Text)
      → λ(x : Uint208List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint208_list}, \"type\": \"uint208\" }"
        , def = x.def
        }

let Uint216 = { _uint216 : Text, def : Def }

let Uint216List = { _uint216_list : Text, def : Def }

let Uint216/build =
        λ(val : Natural)
      → { _uint216 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint216\" }"
        , def = [] : Def
        }

let Uint216List/build =
        λ(val : List Natural)
      → { _uint216_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint216\" }"
        , def = [] : Def
        }

let Uint216/hex =
        λ(val : Uint216)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint216\", \"value\": ${val._uint216} }"
        , def = val.def
        }

let Uint216/fromHex =
        λ(val : Hex)
      → { _uint216 =
            "{ \"op\": \"fromHex\", \"type\": \"uint216\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint216/output =
        λ(id : Text)
      → λ(x : Uint216)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint216}, \"type\": \"uint216\" }"
        , def = x.def
        }

let Uint216List/output =
        λ(id : Text)
      → λ(x : Uint216List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint216_list}, \"type\": \"uint216\" }"
        , def = x.def
        }

let Uint224 = { _uint224 : Text, def : Def }

let Uint224List = { _uint224_list : Text, def : Def }

let Uint224/build =
        λ(val : Natural)
      → { _uint224 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint224\" }"
        , def = [] : Def
        }

let Uint224List/build =
        λ(val : List Natural)
      → { _uint224_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint224\" }"
        , def = [] : Def
        }

let Uint224/hex =
        λ(val : Uint224)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint224\", \"value\": ${val._uint224} }"
        , def = val.def
        }

let Uint224/fromHex =
        λ(val : Hex)
      → { _uint224 =
            "{ \"op\": \"fromHex\", \"type\": \"uint224\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint224/output =
        λ(id : Text)
      → λ(x : Uint224)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint224}, \"type\": \"uint224\" }"
        , def = x.def
        }

let Uint224List/output =
        λ(id : Text)
      → λ(x : Uint224List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint224_list}, \"type\": \"uint224\" }"
        , def = x.def
        }

let Uint232 = { _uint232 : Text, def : Def }

let Uint232List = { _uint232_list : Text, def : Def }

let Uint232/build =
        λ(val : Natural)
      → { _uint232 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint232\" }"
        , def = [] : Def
        }

let Uint232List/build =
        λ(val : List Natural)
      → { _uint232_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint232\" }"
        , def = [] : Def
        }

let Uint232/hex =
        λ(val : Uint232)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint232\", \"value\": ${val._uint232} }"
        , def = val.def
        }

let Uint232/fromHex =
        λ(val : Hex)
      → { _uint232 =
            "{ \"op\": \"fromHex\", \"type\": \"uint232\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint232/output =
        λ(id : Text)
      → λ(x : Uint232)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint232}, \"type\": \"uint232\" }"
        , def = x.def
        }

let Uint232List/output =
        λ(id : Text)
      → λ(x : Uint232List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint232_list}, \"type\": \"uint232\" }"
        , def = x.def
        }

let Uint240 = { _uint240 : Text, def : Def }

let Uint240List = { _uint240_list : Text, def : Def }

let Uint240/build =
        λ(val : Natural)
      → { _uint240 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint240\" }"
        , def = [] : Def
        }

let Uint240List/build =
        λ(val : List Natural)
      → { _uint240_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint240\" }"
        , def = [] : Def
        }

let Uint240/hex =
        λ(val : Uint240)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint240\", \"value\": ${val._uint240} }"
        , def = val.def
        }

let Uint240/fromHex =
        λ(val : Hex)
      → { _uint240 =
            "{ \"op\": \"fromHex\", \"type\": \"uint240\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint240/output =
        λ(id : Text)
      → λ(x : Uint240)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint240}, \"type\": \"uint240\" }"
        , def = x.def
        }

let Uint240List/output =
        λ(id : Text)
      → λ(x : Uint240List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint240_list}, \"type\": \"uint240\" }"
        , def = x.def
        }

let Uint248 = { _uint248 : Text, def : Def }

let Uint248List = { _uint248_list : Text, def : Def }

let Uint248/build =
        λ(val : Natural)
      → { _uint248 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint248\" }"
        , def = [] : Def
        }

let Uint248List/build =
        λ(val : List Natural)
      → { _uint248_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint248\" }"
        , def = [] : Def
        }

let Uint248/hex =
        λ(val : Uint248)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint248\", \"value\": ${val._uint248} }"
        , def = val.def
        }

let Uint248/fromHex =
        λ(val : Hex)
      → { _uint248 =
            "{ \"op\": \"fromHex\", \"type\": \"uint248\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint248/output =
        λ(id : Text)
      → λ(x : Uint248)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint248}, \"type\": \"uint248\" }"
        , def = x.def
        }

let Uint248List/output =
        λ(id : Text)
      → λ(x : Uint248List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint248_list}, \"type\": \"uint248\" }"
        , def = x.def
        }

let Uint256 = { _uint256 : Text, def : Def }

let Uint256List = { _uint256_list : Text, def : Def }

let Uint256/build =
        λ(val : Natural)
      → { _uint256 =
            "{ \"op\": \"lit\", \"value\": \"${Natural/show
                                                 val}\", \"type\": \"uint256\" }"
        , def = [] : Def
        }

let Uint256List/build =
        λ(val : List Natural)
      → { _uint256_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Natural
                                                     Text
                                                     Natural/show
                                                     val
                                                 )} ], \"type\": \"uint256\" }"
        , def = [] : Def
        }

let Uint256/hex =
        λ(val : Uint256)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"uint256\", \"value\": ${val._uint256} }"
        , def = val.def
        }

let Uint256/fromHex =
        λ(val : Hex)
      → { _uint256 =
            "{ \"op\": \"fromHex\", \"type\": \"uint256\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Uint256/output =
        λ(id : Text)
      → λ(x : Uint256)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint256}, \"type\": \"uint256\" }"
        , def = x.def
        }

let Uint256List/output =
        λ(id : Text)
      → λ(x : Uint256List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._uint256_list}, \"type\": \"uint256\" }"
        , def = x.def
        }

let Int8 = { _int8 : Text, def : Def }

let Int8List = { _int8_list : Text, def : Def }

let Int8/build =
        λ(val : Integer)
      → { _int8 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int8\" }"
        , def = [] : Def
        }

let Int8List/build =
        λ(val : List Integer)
      → { _int8_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int8\" }"
        , def = [] : Def
        }

let Int8/hex =
        λ(val : Int8)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int8\", \"value\": ${val._int8} }"
        , def = val.def
        }

let Int8/fromHex =
        λ(val : Hex)
      → { _int8 =
            "{ \"op\": \"fromHex\", \"type\": \"int8\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int8/output =
        λ(id : Text)
      → λ(x : Int8)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int8}, \"type\": \"int8\" }"
        , def = x.def
        }

let Int8List/output =
        λ(id : Text)
      → λ(x : Int8List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int8_list}, \"type\": \"int8\" }"
        , def = x.def
        }

let Int16 = { _int16 : Text, def : Def }

let Int16List = { _int16_list : Text, def : Def }

let Int16/build =
        λ(val : Integer)
      → { _int16 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int16\" }"
        , def = [] : Def
        }

let Int16List/build =
        λ(val : List Integer)
      → { _int16_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int16\" }"
        , def = [] : Def
        }

let Int16/hex =
        λ(val : Int16)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int16\", \"value\": ${val._int16} }"
        , def = val.def
        }

let Int16/fromHex =
        λ(val : Hex)
      → { _int16 =
            "{ \"op\": \"fromHex\", \"type\": \"int16\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int16/output =
        λ(id : Text)
      → λ(x : Int16)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int16}, \"type\": \"int16\" }"
        , def = x.def
        }

let Int16List/output =
        λ(id : Text)
      → λ(x : Int16List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int16_list}, \"type\": \"int16\" }"
        , def = x.def
        }

let Int24 = { _int24 : Text, def : Def }

let Int24List = { _int24_list : Text, def : Def }

let Int24/build =
        λ(val : Integer)
      → { _int24 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int24\" }"
        , def = [] : Def
        }

let Int24List/build =
        λ(val : List Integer)
      → { _int24_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int24\" }"
        , def = [] : Def
        }

let Int24/hex =
        λ(val : Int24)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int24\", \"value\": ${val._int24} }"
        , def = val.def
        }

let Int24/fromHex =
        λ(val : Hex)
      → { _int24 =
            "{ \"op\": \"fromHex\", \"type\": \"int24\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int24/output =
        λ(id : Text)
      → λ(x : Int24)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int24}, \"type\": \"int24\" }"
        , def = x.def
        }

let Int24List/output =
        λ(id : Text)
      → λ(x : Int24List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int24_list}, \"type\": \"int24\" }"
        , def = x.def
        }

let Int32 = { _int32 : Text, def : Def }

let Int32List = { _int32_list : Text, def : Def }

let Int32/build =
        λ(val : Integer)
      → { _int32 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int32\" }"
        , def = [] : Def
        }

let Int32List/build =
        λ(val : List Integer)
      → { _int32_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int32\" }"
        , def = [] : Def
        }

let Int32/hex =
        λ(val : Int32)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int32\", \"value\": ${val._int32} }"
        , def = val.def
        }

let Int32/fromHex =
        λ(val : Hex)
      → { _int32 =
            "{ \"op\": \"fromHex\", \"type\": \"int32\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int32/output =
        λ(id : Text)
      → λ(x : Int32)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int32}, \"type\": \"int32\" }"
        , def = x.def
        }

let Int32List/output =
        λ(id : Text)
      → λ(x : Int32List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int32_list}, \"type\": \"int32\" }"
        , def = x.def
        }

let Int40 = { _int40 : Text, def : Def }

let Int40List = { _int40_list : Text, def : Def }

let Int40/build =
        λ(val : Integer)
      → { _int40 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int40\" }"
        , def = [] : Def
        }

let Int40List/build =
        λ(val : List Integer)
      → { _int40_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int40\" }"
        , def = [] : Def
        }

let Int40/hex =
        λ(val : Int40)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int40\", \"value\": ${val._int40} }"
        , def = val.def
        }

let Int40/fromHex =
        λ(val : Hex)
      → { _int40 =
            "{ \"op\": \"fromHex\", \"type\": \"int40\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int40/output =
        λ(id : Text)
      → λ(x : Int40)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int40}, \"type\": \"int40\" }"
        , def = x.def
        }

let Int40List/output =
        λ(id : Text)
      → λ(x : Int40List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int40_list}, \"type\": \"int40\" }"
        , def = x.def
        }

let Int48 = { _int48 : Text, def : Def }

let Int48List = { _int48_list : Text, def : Def }

let Int48/build =
        λ(val : Integer)
      → { _int48 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int48\" }"
        , def = [] : Def
        }

let Int48List/build =
        λ(val : List Integer)
      → { _int48_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int48\" }"
        , def = [] : Def
        }

let Int48/hex =
        λ(val : Int48)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int48\", \"value\": ${val._int48} }"
        , def = val.def
        }

let Int48/fromHex =
        λ(val : Hex)
      → { _int48 =
            "{ \"op\": \"fromHex\", \"type\": \"int48\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int48/output =
        λ(id : Text)
      → λ(x : Int48)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int48}, \"type\": \"int48\" }"
        , def = x.def
        }

let Int48List/output =
        λ(id : Text)
      → λ(x : Int48List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int48_list}, \"type\": \"int48\" }"
        , def = x.def
        }

let Int56 = { _int56 : Text, def : Def }

let Int56List = { _int56_list : Text, def : Def }

let Int56/build =
        λ(val : Integer)
      → { _int56 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int56\" }"
        , def = [] : Def
        }

let Int56List/build =
        λ(val : List Integer)
      → { _int56_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int56\" }"
        , def = [] : Def
        }

let Int56/hex =
        λ(val : Int56)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int56\", \"value\": ${val._int56} }"
        , def = val.def
        }

let Int56/fromHex =
        λ(val : Hex)
      → { _int56 =
            "{ \"op\": \"fromHex\", \"type\": \"int56\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int56/output =
        λ(id : Text)
      → λ(x : Int56)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int56}, \"type\": \"int56\" }"
        , def = x.def
        }

let Int56List/output =
        λ(id : Text)
      → λ(x : Int56List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int56_list}, \"type\": \"int56\" }"
        , def = x.def
        }

let Int64 = { _int64 : Text, def : Def }

let Int64List = { _int64_list : Text, def : Def }

let Int64/build =
        λ(val : Integer)
      → { _int64 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int64\" }"
        , def = [] : Def
        }

let Int64List/build =
        λ(val : List Integer)
      → { _int64_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int64\" }"
        , def = [] : Def
        }

let Int64/hex =
        λ(val : Int64)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int64\", \"value\": ${val._int64} }"
        , def = val.def
        }

let Int64/fromHex =
        λ(val : Hex)
      → { _int64 =
            "{ \"op\": \"fromHex\", \"type\": \"int64\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int64/output =
        λ(id : Text)
      → λ(x : Int64)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int64}, \"type\": \"int64\" }"
        , def = x.def
        }

let Int64List/output =
        λ(id : Text)
      → λ(x : Int64List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int64_list}, \"type\": \"int64\" }"
        , def = x.def
        }

let Int72 = { _int72 : Text, def : Def }

let Int72List = { _int72_list : Text, def : Def }

let Int72/build =
        λ(val : Integer)
      → { _int72 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int72\" }"
        , def = [] : Def
        }

let Int72List/build =
        λ(val : List Integer)
      → { _int72_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int72\" }"
        , def = [] : Def
        }

let Int72/hex =
        λ(val : Int72)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int72\", \"value\": ${val._int72} }"
        , def = val.def
        }

let Int72/fromHex =
        λ(val : Hex)
      → { _int72 =
            "{ \"op\": \"fromHex\", \"type\": \"int72\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int72/output =
        λ(id : Text)
      → λ(x : Int72)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int72}, \"type\": \"int72\" }"
        , def = x.def
        }

let Int72List/output =
        λ(id : Text)
      → λ(x : Int72List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int72_list}, \"type\": \"int72\" }"
        , def = x.def
        }

let Int80 = { _int80 : Text, def : Def }

let Int80List = { _int80_list : Text, def : Def }

let Int80/build =
        λ(val : Integer)
      → { _int80 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int80\" }"
        , def = [] : Def
        }

let Int80List/build =
        λ(val : List Integer)
      → { _int80_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int80\" }"
        , def = [] : Def
        }

let Int80/hex =
        λ(val : Int80)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int80\", \"value\": ${val._int80} }"
        , def = val.def
        }

let Int80/fromHex =
        λ(val : Hex)
      → { _int80 =
            "{ \"op\": \"fromHex\", \"type\": \"int80\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int80/output =
        λ(id : Text)
      → λ(x : Int80)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int80}, \"type\": \"int80\" }"
        , def = x.def
        }

let Int80List/output =
        λ(id : Text)
      → λ(x : Int80List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int80_list}, \"type\": \"int80\" }"
        , def = x.def
        }

let Int88 = { _int88 : Text, def : Def }

let Int88List = { _int88_list : Text, def : Def }

let Int88/build =
        λ(val : Integer)
      → { _int88 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int88\" }"
        , def = [] : Def
        }

let Int88List/build =
        λ(val : List Integer)
      → { _int88_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int88\" }"
        , def = [] : Def
        }

let Int88/hex =
        λ(val : Int88)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int88\", \"value\": ${val._int88} }"
        , def = val.def
        }

let Int88/fromHex =
        λ(val : Hex)
      → { _int88 =
            "{ \"op\": \"fromHex\", \"type\": \"int88\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int88/output =
        λ(id : Text)
      → λ(x : Int88)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int88}, \"type\": \"int88\" }"
        , def = x.def
        }

let Int88List/output =
        λ(id : Text)
      → λ(x : Int88List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int88_list}, \"type\": \"int88\" }"
        , def = x.def
        }

let Int96 = { _int96 : Text, def : Def }

let Int96List = { _int96_list : Text, def : Def }

let Int96/build =
        λ(val : Integer)
      → { _int96 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int96\" }"
        , def = [] : Def
        }

let Int96List/build =
        λ(val : List Integer)
      → { _int96_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int96\" }"
        , def = [] : Def
        }

let Int96/hex =
        λ(val : Int96)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int96\", \"value\": ${val._int96} }"
        , def = val.def
        }

let Int96/fromHex =
        λ(val : Hex)
      → { _int96 =
            "{ \"op\": \"fromHex\", \"type\": \"int96\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int96/output =
        λ(id : Text)
      → λ(x : Int96)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int96}, \"type\": \"int96\" }"
        , def = x.def
        }

let Int96List/output =
        λ(id : Text)
      → λ(x : Int96List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int96_list}, \"type\": \"int96\" }"
        , def = x.def
        }

let Int104 = { _int104 : Text, def : Def }

let Int104List = { _int104_list : Text, def : Def }

let Int104/build =
        λ(val : Integer)
      → { _int104 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int104\" }"
        , def = [] : Def
        }

let Int104List/build =
        λ(val : List Integer)
      → { _int104_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int104\" }"
        , def = [] : Def
        }

let Int104/hex =
        λ(val : Int104)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int104\", \"value\": ${val._int104} }"
        , def = val.def
        }

let Int104/fromHex =
        λ(val : Hex)
      → { _int104 =
            "{ \"op\": \"fromHex\", \"type\": \"int104\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int104/output =
        λ(id : Text)
      → λ(x : Int104)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int104}, \"type\": \"int104\" }"
        , def = x.def
        }

let Int104List/output =
        λ(id : Text)
      → λ(x : Int104List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int104_list}, \"type\": \"int104\" }"
        , def = x.def
        }

let Int112 = { _int112 : Text, def : Def }

let Int112List = { _int112_list : Text, def : Def }

let Int112/build =
        λ(val : Integer)
      → { _int112 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int112\" }"
        , def = [] : Def
        }

let Int112List/build =
        λ(val : List Integer)
      → { _int112_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int112\" }"
        , def = [] : Def
        }

let Int112/hex =
        λ(val : Int112)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int112\", \"value\": ${val._int112} }"
        , def = val.def
        }

let Int112/fromHex =
        λ(val : Hex)
      → { _int112 =
            "{ \"op\": \"fromHex\", \"type\": \"int112\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int112/output =
        λ(id : Text)
      → λ(x : Int112)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int112}, \"type\": \"int112\" }"
        , def = x.def
        }

let Int112List/output =
        λ(id : Text)
      → λ(x : Int112List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int112_list}, \"type\": \"int112\" }"
        , def = x.def
        }

let Int120 = { _int120 : Text, def : Def }

let Int120List = { _int120_list : Text, def : Def }

let Int120/build =
        λ(val : Integer)
      → { _int120 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int120\" }"
        , def = [] : Def
        }

let Int120List/build =
        λ(val : List Integer)
      → { _int120_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int120\" }"
        , def = [] : Def
        }

let Int120/hex =
        λ(val : Int120)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int120\", \"value\": ${val._int120} }"
        , def = val.def
        }

let Int120/fromHex =
        λ(val : Hex)
      → { _int120 =
            "{ \"op\": \"fromHex\", \"type\": \"int120\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int120/output =
        λ(id : Text)
      → λ(x : Int120)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int120}, \"type\": \"int120\" }"
        , def = x.def
        }

let Int120List/output =
        λ(id : Text)
      → λ(x : Int120List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int120_list}, \"type\": \"int120\" }"
        , def = x.def
        }

let Int128 = { _int128 : Text, def : Def }

let Int128List = { _int128_list : Text, def : Def }

let Int128/build =
        λ(val : Integer)
      → { _int128 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int128\" }"
        , def = [] : Def
        }

let Int128List/build =
        λ(val : List Integer)
      → { _int128_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int128\" }"
        , def = [] : Def
        }

let Int128/hex =
        λ(val : Int128)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int128\", \"value\": ${val._int128} }"
        , def = val.def
        }

let Int128/fromHex =
        λ(val : Hex)
      → { _int128 =
            "{ \"op\": \"fromHex\", \"type\": \"int128\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int128/output =
        λ(id : Text)
      → λ(x : Int128)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int128}, \"type\": \"int128\" }"
        , def = x.def
        }

let Int128List/output =
        λ(id : Text)
      → λ(x : Int128List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int128_list}, \"type\": \"int128\" }"
        , def = x.def
        }

let Int136 = { _int136 : Text, def : Def }

let Int136List = { _int136_list : Text, def : Def }

let Int136/build =
        λ(val : Integer)
      → { _int136 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int136\" }"
        , def = [] : Def
        }

let Int136List/build =
        λ(val : List Integer)
      → { _int136_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int136\" }"
        , def = [] : Def
        }

let Int136/hex =
        λ(val : Int136)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int136\", \"value\": ${val._int136} }"
        , def = val.def
        }

let Int136/fromHex =
        λ(val : Hex)
      → { _int136 =
            "{ \"op\": \"fromHex\", \"type\": \"int136\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int136/output =
        λ(id : Text)
      → λ(x : Int136)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int136}, \"type\": \"int136\" }"
        , def = x.def
        }

let Int136List/output =
        λ(id : Text)
      → λ(x : Int136List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int136_list}, \"type\": \"int136\" }"
        , def = x.def
        }

let Int144 = { _int144 : Text, def : Def }

let Int144List = { _int144_list : Text, def : Def }

let Int144/build =
        λ(val : Integer)
      → { _int144 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int144\" }"
        , def = [] : Def
        }

let Int144List/build =
        λ(val : List Integer)
      → { _int144_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int144\" }"
        , def = [] : Def
        }

let Int144/hex =
        λ(val : Int144)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int144\", \"value\": ${val._int144} }"
        , def = val.def
        }

let Int144/fromHex =
        λ(val : Hex)
      → { _int144 =
            "{ \"op\": \"fromHex\", \"type\": \"int144\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int144/output =
        λ(id : Text)
      → λ(x : Int144)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int144}, \"type\": \"int144\" }"
        , def = x.def
        }

let Int144List/output =
        λ(id : Text)
      → λ(x : Int144List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int144_list}, \"type\": \"int144\" }"
        , def = x.def
        }

let Int152 = { _int152 : Text, def : Def }

let Int152List = { _int152_list : Text, def : Def }

let Int152/build =
        λ(val : Integer)
      → { _int152 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int152\" }"
        , def = [] : Def
        }

let Int152List/build =
        λ(val : List Integer)
      → { _int152_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int152\" }"
        , def = [] : Def
        }

let Int152/hex =
        λ(val : Int152)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int152\", \"value\": ${val._int152} }"
        , def = val.def
        }

let Int152/fromHex =
        λ(val : Hex)
      → { _int152 =
            "{ \"op\": \"fromHex\", \"type\": \"int152\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int152/output =
        λ(id : Text)
      → λ(x : Int152)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int152}, \"type\": \"int152\" }"
        , def = x.def
        }

let Int152List/output =
        λ(id : Text)
      → λ(x : Int152List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int152_list}, \"type\": \"int152\" }"
        , def = x.def
        }

let Int160 = { _int160 : Text, def : Def }

let Int160List = { _int160_list : Text, def : Def }

let Int160/build =
        λ(val : Integer)
      → { _int160 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int160\" }"
        , def = [] : Def
        }

let Int160List/build =
        λ(val : List Integer)
      → { _int160_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int160\" }"
        , def = [] : Def
        }

let Int160/hex =
        λ(val : Int160)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int160\", \"value\": ${val._int160} }"
        , def = val.def
        }

let Int160/fromHex =
        λ(val : Hex)
      → { _int160 =
            "{ \"op\": \"fromHex\", \"type\": \"int160\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int160/output =
        λ(id : Text)
      → λ(x : Int160)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int160}, \"type\": \"int160\" }"
        , def = x.def
        }

let Int160List/output =
        λ(id : Text)
      → λ(x : Int160List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int160_list}, \"type\": \"int160\" }"
        , def = x.def
        }

let Int168 = { _int168 : Text, def : Def }

let Int168List = { _int168_list : Text, def : Def }

let Int168/build =
        λ(val : Integer)
      → { _int168 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int168\" }"
        , def = [] : Def
        }

let Int168List/build =
        λ(val : List Integer)
      → { _int168_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int168\" }"
        , def = [] : Def
        }

let Int168/hex =
        λ(val : Int168)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int168\", \"value\": ${val._int168} }"
        , def = val.def
        }

let Int168/fromHex =
        λ(val : Hex)
      → { _int168 =
            "{ \"op\": \"fromHex\", \"type\": \"int168\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int168/output =
        λ(id : Text)
      → λ(x : Int168)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int168}, \"type\": \"int168\" }"
        , def = x.def
        }

let Int168List/output =
        λ(id : Text)
      → λ(x : Int168List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int168_list}, \"type\": \"int168\" }"
        , def = x.def
        }

let Int176 = { _int176 : Text, def : Def }

let Int176List = { _int176_list : Text, def : Def }

let Int176/build =
        λ(val : Integer)
      → { _int176 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int176\" }"
        , def = [] : Def
        }

let Int176List/build =
        λ(val : List Integer)
      → { _int176_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int176\" }"
        , def = [] : Def
        }

let Int176/hex =
        λ(val : Int176)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int176\", \"value\": ${val._int176} }"
        , def = val.def
        }

let Int176/fromHex =
        λ(val : Hex)
      → { _int176 =
            "{ \"op\": \"fromHex\", \"type\": \"int176\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int176/output =
        λ(id : Text)
      → λ(x : Int176)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int176}, \"type\": \"int176\" }"
        , def = x.def
        }

let Int176List/output =
        λ(id : Text)
      → λ(x : Int176List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int176_list}, \"type\": \"int176\" }"
        , def = x.def
        }

let Int184 = { _int184 : Text, def : Def }

let Int184List = { _int184_list : Text, def : Def }

let Int184/build =
        λ(val : Integer)
      → { _int184 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int184\" }"
        , def = [] : Def
        }

let Int184List/build =
        λ(val : List Integer)
      → { _int184_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int184\" }"
        , def = [] : Def
        }

let Int184/hex =
        λ(val : Int184)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int184\", \"value\": ${val._int184} }"
        , def = val.def
        }

let Int184/fromHex =
        λ(val : Hex)
      → { _int184 =
            "{ \"op\": \"fromHex\", \"type\": \"int184\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int184/output =
        λ(id : Text)
      → λ(x : Int184)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int184}, \"type\": \"int184\" }"
        , def = x.def
        }

let Int184List/output =
        λ(id : Text)
      → λ(x : Int184List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int184_list}, \"type\": \"int184\" }"
        , def = x.def
        }

let Int192 = { _int192 : Text, def : Def }

let Int192List = { _int192_list : Text, def : Def }

let Int192/build =
        λ(val : Integer)
      → { _int192 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int192\" }"
        , def = [] : Def
        }

let Int192List/build =
        λ(val : List Integer)
      → { _int192_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int192\" }"
        , def = [] : Def
        }

let Int192/hex =
        λ(val : Int192)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int192\", \"value\": ${val._int192} }"
        , def = val.def
        }

let Int192/fromHex =
        λ(val : Hex)
      → { _int192 =
            "{ \"op\": \"fromHex\", \"type\": \"int192\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int192/output =
        λ(id : Text)
      → λ(x : Int192)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int192}, \"type\": \"int192\" }"
        , def = x.def
        }

let Int192List/output =
        λ(id : Text)
      → λ(x : Int192List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int192_list}, \"type\": \"int192\" }"
        , def = x.def
        }

let Int200 = { _int200 : Text, def : Def }

let Int200List = { _int200_list : Text, def : Def }

let Int200/build =
        λ(val : Integer)
      → { _int200 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int200\" }"
        , def = [] : Def
        }

let Int200List/build =
        λ(val : List Integer)
      → { _int200_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int200\" }"
        , def = [] : Def
        }

let Int200/hex =
        λ(val : Int200)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int200\", \"value\": ${val._int200} }"
        , def = val.def
        }

let Int200/fromHex =
        λ(val : Hex)
      → { _int200 =
            "{ \"op\": \"fromHex\", \"type\": \"int200\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int200/output =
        λ(id : Text)
      → λ(x : Int200)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int200}, \"type\": \"int200\" }"
        , def = x.def
        }

let Int200List/output =
        λ(id : Text)
      → λ(x : Int200List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int200_list}, \"type\": \"int200\" }"
        , def = x.def
        }

let Int208 = { _int208 : Text, def : Def }

let Int208List = { _int208_list : Text, def : Def }

let Int208/build =
        λ(val : Integer)
      → { _int208 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int208\" }"
        , def = [] : Def
        }

let Int208List/build =
        λ(val : List Integer)
      → { _int208_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int208\" }"
        , def = [] : Def
        }

let Int208/hex =
        λ(val : Int208)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int208\", \"value\": ${val._int208} }"
        , def = val.def
        }

let Int208/fromHex =
        λ(val : Hex)
      → { _int208 =
            "{ \"op\": \"fromHex\", \"type\": \"int208\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int208/output =
        λ(id : Text)
      → λ(x : Int208)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int208}, \"type\": \"int208\" }"
        , def = x.def
        }

let Int208List/output =
        λ(id : Text)
      → λ(x : Int208List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int208_list}, \"type\": \"int208\" }"
        , def = x.def
        }

let Int216 = { _int216 : Text, def : Def }

let Int216List = { _int216_list : Text, def : Def }

let Int216/build =
        λ(val : Integer)
      → { _int216 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int216\" }"
        , def = [] : Def
        }

let Int216List/build =
        λ(val : List Integer)
      → { _int216_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int216\" }"
        , def = [] : Def
        }

let Int216/hex =
        λ(val : Int216)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int216\", \"value\": ${val._int216} }"
        , def = val.def
        }

let Int216/fromHex =
        λ(val : Hex)
      → { _int216 =
            "{ \"op\": \"fromHex\", \"type\": \"int216\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int216/output =
        λ(id : Text)
      → λ(x : Int216)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int216}, \"type\": \"int216\" }"
        , def = x.def
        }

let Int216List/output =
        λ(id : Text)
      → λ(x : Int216List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int216_list}, \"type\": \"int216\" }"
        , def = x.def
        }

let Int224 = { _int224 : Text, def : Def }

let Int224List = { _int224_list : Text, def : Def }

let Int224/build =
        λ(val : Integer)
      → { _int224 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int224\" }"
        , def = [] : Def
        }

let Int224List/build =
        λ(val : List Integer)
      → { _int224_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int224\" }"
        , def = [] : Def
        }

let Int224/hex =
        λ(val : Int224)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int224\", \"value\": ${val._int224} }"
        , def = val.def
        }

let Int224/fromHex =
        λ(val : Hex)
      → { _int224 =
            "{ \"op\": \"fromHex\", \"type\": \"int224\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int224/output =
        λ(id : Text)
      → λ(x : Int224)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int224}, \"type\": \"int224\" }"
        , def = x.def
        }

let Int224List/output =
        λ(id : Text)
      → λ(x : Int224List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int224_list}, \"type\": \"int224\" }"
        , def = x.def
        }

let Int232 = { _int232 : Text, def : Def }

let Int232List = { _int232_list : Text, def : Def }

let Int232/build =
        λ(val : Integer)
      → { _int232 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int232\" }"
        , def = [] : Def
        }

let Int232List/build =
        λ(val : List Integer)
      → { _int232_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int232\" }"
        , def = [] : Def
        }

let Int232/hex =
        λ(val : Int232)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int232\", \"value\": ${val._int232} }"
        , def = val.def
        }

let Int232/fromHex =
        λ(val : Hex)
      → { _int232 =
            "{ \"op\": \"fromHex\", \"type\": \"int232\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int232/output =
        λ(id : Text)
      → λ(x : Int232)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int232}, \"type\": \"int232\" }"
        , def = x.def
        }

let Int232List/output =
        λ(id : Text)
      → λ(x : Int232List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int232_list}, \"type\": \"int232\" }"
        , def = x.def
        }

let Int240 = { _int240 : Text, def : Def }

let Int240List = { _int240_list : Text, def : Def }

let Int240/build =
        λ(val : Integer)
      → { _int240 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int240\" }"
        , def = [] : Def
        }

let Int240List/build =
        λ(val : List Integer)
      → { _int240_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int240\" }"
        , def = [] : Def
        }

let Int240/hex =
        λ(val : Int240)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int240\", \"value\": ${val._int240} }"
        , def = val.def
        }

let Int240/fromHex =
        λ(val : Hex)
      → { _int240 =
            "{ \"op\": \"fromHex\", \"type\": \"int240\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int240/output =
        λ(id : Text)
      → λ(x : Int240)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int240}, \"type\": \"int240\" }"
        , def = x.def
        }

let Int240List/output =
        λ(id : Text)
      → λ(x : Int240List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int240_list}, \"type\": \"int240\" }"
        , def = x.def
        }

let Int248 = { _int248 : Text, def : Def }

let Int248List = { _int248_list : Text, def : Def }

let Int248/build =
        λ(val : Integer)
      → { _int248 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int248\" }"
        , def = [] : Def
        }

let Int248List/build =
        λ(val : List Integer)
      → { _int248_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int248\" }"
        , def = [] : Def
        }

let Int248/hex =
        λ(val : Int248)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int248\", \"value\": ${val._int248} }"
        , def = val.def
        }

let Int248/fromHex =
        λ(val : Hex)
      → { _int248 =
            "{ \"op\": \"fromHex\", \"type\": \"int248\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int248/output =
        λ(id : Text)
      → λ(x : Int248)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int248}, \"type\": \"int248\" }"
        , def = x.def
        }

let Int248List/output =
        λ(id : Text)
      → λ(x : Int248List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int248_list}, \"type\": \"int248\" }"
        , def = x.def
        }

let Int256 = { _int256 : Text, def : Def }

let Int256List = { _int256_list : Text, def : Def }

let Int256/build =
        λ(val : Integer)
      → { _int256 =
            "{ \"op\": \"lit\", \"value\": \"${Integer/show
                                                 val}\", \"type\": \"int256\" }"
        , def = [] : Def
        }

let Int256List/build =
        λ(val : List Integer)
      → { _int256_list =
            "{ \"op\": \"lit\", \"value\": [ ${./Prelude/Text/concatMapSep
                                                 ", "
                                                 Text
                                                 (λ(x : Text) → "\"${x}\"")
                                                 ( ./Prelude/List/map
                                                     Integer
                                                     Text
                                                     Integer/show
                                                     val
                                                 )} ], \"type\": \"int256\" }"
        , def = [] : Def
        }

let Int256/hex =
        λ(val : Int256)
      → { _hex =
            "{ \"op\": \"toHex\", \"type\": \"int256\", \"value\": ${val._int256} }"
        , def = val.def
        }

let Int256/fromHex =
        λ(val : Hex)
      → { _int256 =
            "{ \"op\": \"fromHex\", \"type\": \"int256\", \"value\": ${val._hex} }"
        , def = val.def
        }

let Int256/output =
        λ(id : Text)
      → λ(x : Int256)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int256}, \"type\": \"int256\" }"
        , def = x.def
        }

let Int256List/output =
        λ(id : Text)
      → λ(x : Int256List)
      → { _void =
            "{ \"op\": \"output\", \"id\": \"${id}\", \"value\": ${x._int256_list}, \"type\": \"int256\" }"
        , def = x.def
        }

in  { Void = Void
    , VoidList = VoidList
    , Void/build = Void/build
    , VoidList/build = VoidList/build
    , Void/hex = Void/hex
    , Void/fromHex = Void/fromHex
    , evm/void = λ(v : Text) → λ(d : Def) → { _void = v, def = d }
    , evm/void_list = λ(v : Text) → λ(d : Def) → { _void_list = v, def = d }
    , evm/void/value = λ(v : Void) → v._void
    , evm/void_list/value = λ(v : VoidList) → v._void_list
    , evm/void/Type = Void
    , evm/void_list/Type = VoidList
    , Void/output = Void/output
    , VoidList/output = VoidList/output
    , Hex = Hex
    , HexList = HexList
    , Hex/build = Hex/build
    , HexList/build = HexList/build
    , Hex/hex = Hex/hex
    , Hex/fromHex = Hex/fromHex
    , evm/hex = λ(v : Text) → λ(d : Def) → { _hex = v, def = d }
    , evm/hex_list = λ(v : Text) → λ(d : Def) → { _hex_list = v, def = d }
    , evm/hex/value = λ(v : Hex) → v._hex
    , evm/hex_list/value = λ(v : HexList) → v._hex_list
    , evm/hex/Type = Hex
    , evm/hex_list/Type = HexList
    , Hex/output = Hex/output
    , HexList/output = HexList/output
    , Boolean = Boolean
    , BooleanList = BooleanList
    , Boolean/build = Boolean/build
    , BooleanList/build = BooleanList/build
    , Boolean/hex = Boolean/hex
    , Boolean/fromHex = Boolean/fromHex
    , evm/bool = λ(v : Text) → λ(d : Def) → { _bool = v, def = d }
    , evm/bool_list = λ(v : Text) → λ(d : Def) → { _bool_list = v, def = d }
    , evm/bool/value = λ(v : Boolean) → v._bool
    , evm/bool_list/value = λ(v : BooleanList) → v._bool_list
    , evm/bool/Type = Boolean
    , evm/bool_list/Type = BooleanList
    , Boolean/output = Boolean/output
    , BooleanList/output = BooleanList/output
    , Address = Address
    , AddressList = AddressList
    , Address/build = Address/build
    , AddressList/build = AddressList/build
    , Address/hex = Address/hex
    , Address/fromHex = Address/fromHex
    , evm/address = λ(v : Text) → λ(d : Def) → { _address = v, def = d }
    , evm/address_list =
        λ(v : Text) → λ(d : Def) → { _address_list = v, def = d }
    , evm/address/value = λ(v : Address) → v._address
    , evm/address_list/value = λ(v : AddressList) → v._address_list
    , evm/address/Type = Address
    , evm/address_list/Type = AddressList
    , Address/output = Address/output
    , AddressList/output = AddressList/output
    , Bytes = Bytes
    , BytesList = BytesList
    , Bytes/build = Bytes/build
    , BytesList/build = BytesList/build
    , Bytes/hex = Bytes/hex
    , Bytes/fromHex = Bytes/fromHex
    , evm/bytes = λ(v : Text) → λ(d : Def) → { _bytes1 = v, def = d }
    , evm/bytes_list = λ(v : Text) → λ(d : Def) → { _bytes1_list = v, def = d }
    , evm/bytes/value = λ(v : Bytes) → v._bytes1
    , evm/bytes_list/value = λ(v : BytesList) → v._bytes1_list
    , evm/bytes/Type = Bytes
    , evm/bytes_list/Type = BytesList
    , Bytes/output = Bytes/output
    , BytesList/output = BytesList/output
    , Uint = Uint
    , UintList = UintList
    , Uint/build = Uint/build
    , UintList/build = UintList/build
    , Uint/hex = Uint/hex
    , Uint/fromHex = Uint/fromHex
    , evm/uint = λ(v : Text) → λ(d : Def) → { _uint256 = v, def = d }
    , evm/uint_list = λ(v : Text) → λ(d : Def) → { _uint256_list = v, def = d }
    , evm/uint/value = λ(v : Uint) → v._uint256
    , evm/uint_list/value = λ(v : UintList) → v._uint256_list
    , evm/uint/Type = Uint
    , evm/uint_list/Type = UintList
    , Uint/output = Uint/output
    , UintList/output = UintList/output
    , Int = Int
    , IntList = IntList
    , Int/build = Int/build
    , IntList/build = IntList/build
    , Int/hex = Int/hex
    , Int/fromHex = Int/fromHex
    , evm/int = λ(v : Text) → λ(d : Def) → { _int256 = v, def = d }
    , evm/int_list = λ(v : Text) → λ(d : Def) → { _int256_list = v, def = d }
    , evm/int/value = λ(v : Int) → v._int256
    , evm/int_list/value = λ(v : IntList) → v._int256_list
    , evm/int/Type = Int
    , evm/int_list/Type = IntList
    , Int/output = Int/output
    , IntList/output = IntList/output
    , String = String
    , StringList = StringList
    , String/build = String/build
    , StringList/build = StringList/build
    , String/hex = String/hex
    , String/fromHex = String/fromHex
    , evm/string = λ(v : Text) → λ(d : Def) → { _string = v, def = d }
    , evm/string_list = λ(v : Text) → λ(d : Def) → { _string_list = v, def = d }
    , evm/string/value = λ(v : String) → v._string
    , evm/string_list/value = λ(v : StringList) → v._string_list
    , evm/string/Type = String
    , evm/string_list/Type = StringList
    , String/output = String/output
    , StringList/output = StringList/output
    , Tuple = Tuple
    , TupleList = TupleList
    , Tuple/build = Tuple/build
    , TupleList/build = TupleList/build
    , Tuple/hex = Tuple/hex
    , Tuple/fromHex = Tuple/fromHex
    , evm/tuple = λ(v : Text) → λ(d : Def) → { _tuple = v, def = d }
    , evm/tuple_list = λ(v : Text) → λ(d : Def) → { _tuple_list = v, def = d }
    , evm/tuple/value = λ(v : Tuple) → v._tuple
    , evm/tuple_list/value = λ(v : TupleList) → v._tuple_list
    , evm/tuple/Type = Tuple
    , evm/tuple_list/Type = TupleList
    , Tuple/output = Tuple/output
    , TupleList/output = TupleList/output
    , Bytes1 = Bytes1
    , Bytes1List = Bytes1List
    , Bytes1/build = Bytes1/build
    , Bytes1List/build = Bytes1List/build
    , Bytes1/hex = Bytes1/hex
    , Bytes1/fromHex = Bytes1/fromHex
    , evm/bytes1 = λ(v : Text) → λ(d : Def) → { _bytes1 = v, def = d }
    , evm/bytes1_list = λ(v : Text) → λ(d : Def) → { _bytes1_list = v, def = d }
    , evm/bytes1/value = λ(v : Bytes1) → v._bytes1
    , evm/bytes1_list/value = λ(v : Bytes1List) → v._bytes1_list
    , evm/bytes1/Type = Bytes1
    , evm/bytes1_list/Type = Bytes1List
    , Bytes1/output = Bytes1/output
    , Bytes1List/output = Bytes1List/output
    , Bytes2 = Bytes2
    , Bytes2List = Bytes2List
    , Bytes2/build = Bytes2/build
    , Bytes2List/build = Bytes2List/build
    , Bytes2/hex = Bytes2/hex
    , Bytes2/fromHex = Bytes2/fromHex
    , evm/bytes2 = λ(v : Text) → λ(d : Def) → { _bytes2 = v, def = d }
    , evm/bytes2_list = λ(v : Text) → λ(d : Def) → { _bytes2_list = v, def = d }
    , evm/bytes2/value = λ(v : Bytes2) → v._bytes2
    , evm/bytes2_list/value = λ(v : Bytes2List) → v._bytes2_list
    , evm/bytes2/Type = Bytes2
    , evm/bytes2_list/Type = Bytes2List
    , Bytes2/output = Bytes2/output
    , Bytes2List/output = Bytes2List/output
    , Bytes3 = Bytes3
    , Bytes3List = Bytes3List
    , Bytes3/build = Bytes3/build
    , Bytes3List/build = Bytes3List/build
    , Bytes3/hex = Bytes3/hex
    , Bytes3/fromHex = Bytes3/fromHex
    , evm/bytes3 = λ(v : Text) → λ(d : Def) → { _bytes3 = v, def = d }
    , evm/bytes3_list = λ(v : Text) → λ(d : Def) → { _bytes3_list = v, def = d }
    , evm/bytes3/value = λ(v : Bytes3) → v._bytes3
    , evm/bytes3_list/value = λ(v : Bytes3List) → v._bytes3_list
    , evm/bytes3/Type = Bytes3
    , evm/bytes3_list/Type = Bytes3List
    , Bytes3/output = Bytes3/output
    , Bytes3List/output = Bytes3List/output
    , Bytes4 = Bytes4
    , Bytes4List = Bytes4List
    , Bytes4/build = Bytes4/build
    , Bytes4List/build = Bytes4List/build
    , Bytes4/hex = Bytes4/hex
    , Bytes4/fromHex = Bytes4/fromHex
    , evm/bytes4 = λ(v : Text) → λ(d : Def) → { _bytes4 = v, def = d }
    , evm/bytes4_list = λ(v : Text) → λ(d : Def) → { _bytes4_list = v, def = d }
    , evm/bytes4/value = λ(v : Bytes4) → v._bytes4
    , evm/bytes4_list/value = λ(v : Bytes4List) → v._bytes4_list
    , evm/bytes4/Type = Bytes4
    , evm/bytes4_list/Type = Bytes4List
    , Bytes4/output = Bytes4/output
    , Bytes4List/output = Bytes4List/output
    , Bytes5 = Bytes5
    , Bytes5List = Bytes5List
    , Bytes5/build = Bytes5/build
    , Bytes5List/build = Bytes5List/build
    , Bytes5/hex = Bytes5/hex
    , Bytes5/fromHex = Bytes5/fromHex
    , evm/bytes5 = λ(v : Text) → λ(d : Def) → { _bytes5 = v, def = d }
    , evm/bytes5_list = λ(v : Text) → λ(d : Def) → { _bytes5_list = v, def = d }
    , evm/bytes5/value = λ(v : Bytes5) → v._bytes5
    , evm/bytes5_list/value = λ(v : Bytes5List) → v._bytes5_list
    , evm/bytes5/Type = Bytes5
    , evm/bytes5_list/Type = Bytes5List
    , Bytes5/output = Bytes5/output
    , Bytes5List/output = Bytes5List/output
    , Bytes6 = Bytes6
    , Bytes6List = Bytes6List
    , Bytes6/build = Bytes6/build
    , Bytes6List/build = Bytes6List/build
    , Bytes6/hex = Bytes6/hex
    , Bytes6/fromHex = Bytes6/fromHex
    , evm/bytes6 = λ(v : Text) → λ(d : Def) → { _bytes6 = v, def = d }
    , evm/bytes6_list = λ(v : Text) → λ(d : Def) → { _bytes6_list = v, def = d }
    , evm/bytes6/value = λ(v : Bytes6) → v._bytes6
    , evm/bytes6_list/value = λ(v : Bytes6List) → v._bytes6_list
    , evm/bytes6/Type = Bytes6
    , evm/bytes6_list/Type = Bytes6List
    , Bytes6/output = Bytes6/output
    , Bytes6List/output = Bytes6List/output
    , Bytes7 = Bytes7
    , Bytes7List = Bytes7List
    , Bytes7/build = Bytes7/build
    , Bytes7List/build = Bytes7List/build
    , Bytes7/hex = Bytes7/hex
    , Bytes7/fromHex = Bytes7/fromHex
    , evm/bytes7 = λ(v : Text) → λ(d : Def) → { _bytes7 = v, def = d }
    , evm/bytes7_list = λ(v : Text) → λ(d : Def) → { _bytes7_list = v, def = d }
    , evm/bytes7/value = λ(v : Bytes7) → v._bytes7
    , evm/bytes7_list/value = λ(v : Bytes7List) → v._bytes7_list
    , evm/bytes7/Type = Bytes7
    , evm/bytes7_list/Type = Bytes7List
    , Bytes7/output = Bytes7/output
    , Bytes7List/output = Bytes7List/output
    , Bytes8 = Bytes8
    , Bytes8List = Bytes8List
    , Bytes8/build = Bytes8/build
    , Bytes8List/build = Bytes8List/build
    , Bytes8/hex = Bytes8/hex
    , Bytes8/fromHex = Bytes8/fromHex
    , evm/bytes8 = λ(v : Text) → λ(d : Def) → { _bytes8 = v, def = d }
    , evm/bytes8_list = λ(v : Text) → λ(d : Def) → { _bytes8_list = v, def = d }
    , evm/bytes8/value = λ(v : Bytes8) → v._bytes8
    , evm/bytes8_list/value = λ(v : Bytes8List) → v._bytes8_list
    , evm/bytes8/Type = Bytes8
    , evm/bytes8_list/Type = Bytes8List
    , Bytes8/output = Bytes8/output
    , Bytes8List/output = Bytes8List/output
    , Bytes9 = Bytes9
    , Bytes9List = Bytes9List
    , Bytes9/build = Bytes9/build
    , Bytes9List/build = Bytes9List/build
    , Bytes9/hex = Bytes9/hex
    , Bytes9/fromHex = Bytes9/fromHex
    , evm/bytes9 = λ(v : Text) → λ(d : Def) → { _bytes9 = v, def = d }
    , evm/bytes9_list = λ(v : Text) → λ(d : Def) → { _bytes9_list = v, def = d }
    , evm/bytes9/value = λ(v : Bytes9) → v._bytes9
    , evm/bytes9_list/value = λ(v : Bytes9List) → v._bytes9_list
    , evm/bytes9/Type = Bytes9
    , evm/bytes9_list/Type = Bytes9List
    , Bytes9/output = Bytes9/output
    , Bytes9List/output = Bytes9List/output
    , Bytes10 = Bytes10
    , Bytes10List = Bytes10List
    , Bytes10/build = Bytes10/build
    , Bytes10List/build = Bytes10List/build
    , Bytes10/hex = Bytes10/hex
    , Bytes10/fromHex = Bytes10/fromHex
    , evm/bytes10 = λ(v : Text) → λ(d : Def) → { _bytes10 = v, def = d }
    , evm/bytes10_list =
        λ(v : Text) → λ(d : Def) → { _bytes10_list = v, def = d }
    , evm/bytes10/value = λ(v : Bytes10) → v._bytes10
    , evm/bytes10_list/value = λ(v : Bytes10List) → v._bytes10_list
    , evm/bytes10/Type = Bytes10
    , evm/bytes10_list/Type = Bytes10List
    , Bytes10/output = Bytes10/output
    , Bytes10List/output = Bytes10List/output
    , Bytes11 = Bytes11
    , Bytes11List = Bytes11List
    , Bytes11/build = Bytes11/build
    , Bytes11List/build = Bytes11List/build
    , Bytes11/hex = Bytes11/hex
    , Bytes11/fromHex = Bytes11/fromHex
    , evm/bytes11 = λ(v : Text) → λ(d : Def) → { _bytes11 = v, def = d }
    , evm/bytes11_list =
        λ(v : Text) → λ(d : Def) → { _bytes11_list = v, def = d }
    , evm/bytes11/value = λ(v : Bytes11) → v._bytes11
    , evm/bytes11_list/value = λ(v : Bytes11List) → v._bytes11_list
    , evm/bytes11/Type = Bytes11
    , evm/bytes11_list/Type = Bytes11List
    , Bytes11/output = Bytes11/output
    , Bytes11List/output = Bytes11List/output
    , Bytes12 = Bytes12
    , Bytes12List = Bytes12List
    , Bytes12/build = Bytes12/build
    , Bytes12List/build = Bytes12List/build
    , Bytes12/hex = Bytes12/hex
    , Bytes12/fromHex = Bytes12/fromHex
    , evm/bytes12 = λ(v : Text) → λ(d : Def) → { _bytes12 = v, def = d }
    , evm/bytes12_list =
        λ(v : Text) → λ(d : Def) → { _bytes12_list = v, def = d }
    , evm/bytes12/value = λ(v : Bytes12) → v._bytes12
    , evm/bytes12_list/value = λ(v : Bytes12List) → v._bytes12_list
    , evm/bytes12/Type = Bytes12
    , evm/bytes12_list/Type = Bytes12List
    , Bytes12/output = Bytes12/output
    , Bytes12List/output = Bytes12List/output
    , Bytes13 = Bytes13
    , Bytes13List = Bytes13List
    , Bytes13/build = Bytes13/build
    , Bytes13List/build = Bytes13List/build
    , Bytes13/hex = Bytes13/hex
    , Bytes13/fromHex = Bytes13/fromHex
    , evm/bytes13 = λ(v : Text) → λ(d : Def) → { _bytes13 = v, def = d }
    , evm/bytes13_list =
        λ(v : Text) → λ(d : Def) → { _bytes13_list = v, def = d }
    , evm/bytes13/value = λ(v : Bytes13) → v._bytes13
    , evm/bytes13_list/value = λ(v : Bytes13List) → v._bytes13_list
    , evm/bytes13/Type = Bytes13
    , evm/bytes13_list/Type = Bytes13List
    , Bytes13/output = Bytes13/output
    , Bytes13List/output = Bytes13List/output
    , Bytes14 = Bytes14
    , Bytes14List = Bytes14List
    , Bytes14/build = Bytes14/build
    , Bytes14List/build = Bytes14List/build
    , Bytes14/hex = Bytes14/hex
    , Bytes14/fromHex = Bytes14/fromHex
    , evm/bytes14 = λ(v : Text) → λ(d : Def) → { _bytes14 = v, def = d }
    , evm/bytes14_list =
        λ(v : Text) → λ(d : Def) → { _bytes14_list = v, def = d }
    , evm/bytes14/value = λ(v : Bytes14) → v._bytes14
    , evm/bytes14_list/value = λ(v : Bytes14List) → v._bytes14_list
    , evm/bytes14/Type = Bytes14
    , evm/bytes14_list/Type = Bytes14List
    , Bytes14/output = Bytes14/output
    , Bytes14List/output = Bytes14List/output
    , Bytes15 = Bytes15
    , Bytes15List = Bytes15List
    , Bytes15/build = Bytes15/build
    , Bytes15List/build = Bytes15List/build
    , Bytes15/hex = Bytes15/hex
    , Bytes15/fromHex = Bytes15/fromHex
    , evm/bytes15 = λ(v : Text) → λ(d : Def) → { _bytes15 = v, def = d }
    , evm/bytes15_list =
        λ(v : Text) → λ(d : Def) → { _bytes15_list = v, def = d }
    , evm/bytes15/value = λ(v : Bytes15) → v._bytes15
    , evm/bytes15_list/value = λ(v : Bytes15List) → v._bytes15_list
    , evm/bytes15/Type = Bytes15
    , evm/bytes15_list/Type = Bytes15List
    , Bytes15/output = Bytes15/output
    , Bytes15List/output = Bytes15List/output
    , Bytes16 = Bytes16
    , Bytes16List = Bytes16List
    , Bytes16/build = Bytes16/build
    , Bytes16List/build = Bytes16List/build
    , Bytes16/hex = Bytes16/hex
    , Bytes16/fromHex = Bytes16/fromHex
    , evm/bytes16 = λ(v : Text) → λ(d : Def) → { _bytes16 = v, def = d }
    , evm/bytes16_list =
        λ(v : Text) → λ(d : Def) → { _bytes16_list = v, def = d }
    , evm/bytes16/value = λ(v : Bytes16) → v._bytes16
    , evm/bytes16_list/value = λ(v : Bytes16List) → v._bytes16_list
    , evm/bytes16/Type = Bytes16
    , evm/bytes16_list/Type = Bytes16List
    , Bytes16/output = Bytes16/output
    , Bytes16List/output = Bytes16List/output
    , Bytes17 = Bytes17
    , Bytes17List = Bytes17List
    , Bytes17/build = Bytes17/build
    , Bytes17List/build = Bytes17List/build
    , Bytes17/hex = Bytes17/hex
    , Bytes17/fromHex = Bytes17/fromHex
    , evm/bytes17 = λ(v : Text) → λ(d : Def) → { _bytes17 = v, def = d }
    , evm/bytes17_list =
        λ(v : Text) → λ(d : Def) → { _bytes17_list = v, def = d }
    , evm/bytes17/value = λ(v : Bytes17) → v._bytes17
    , evm/bytes17_list/value = λ(v : Bytes17List) → v._bytes17_list
    , evm/bytes17/Type = Bytes17
    , evm/bytes17_list/Type = Bytes17List
    , Bytes17/output = Bytes17/output
    , Bytes17List/output = Bytes17List/output
    , Bytes18 = Bytes18
    , Bytes18List = Bytes18List
    , Bytes18/build = Bytes18/build
    , Bytes18List/build = Bytes18List/build
    , Bytes18/hex = Bytes18/hex
    , Bytes18/fromHex = Bytes18/fromHex
    , evm/bytes18 = λ(v : Text) → λ(d : Def) → { _bytes18 = v, def = d }
    , evm/bytes18_list =
        λ(v : Text) → λ(d : Def) → { _bytes18_list = v, def = d }
    , evm/bytes18/value = λ(v : Bytes18) → v._bytes18
    , evm/bytes18_list/value = λ(v : Bytes18List) → v._bytes18_list
    , evm/bytes18/Type = Bytes18
    , evm/bytes18_list/Type = Bytes18List
    , Bytes18/output = Bytes18/output
    , Bytes18List/output = Bytes18List/output
    , Bytes19 = Bytes19
    , Bytes19List = Bytes19List
    , Bytes19/build = Bytes19/build
    , Bytes19List/build = Bytes19List/build
    , Bytes19/hex = Bytes19/hex
    , Bytes19/fromHex = Bytes19/fromHex
    , evm/bytes19 = λ(v : Text) → λ(d : Def) → { _bytes19 = v, def = d }
    , evm/bytes19_list =
        λ(v : Text) → λ(d : Def) → { _bytes19_list = v, def = d }
    , evm/bytes19/value = λ(v : Bytes19) → v._bytes19
    , evm/bytes19_list/value = λ(v : Bytes19List) → v._bytes19_list
    , evm/bytes19/Type = Bytes19
    , evm/bytes19_list/Type = Bytes19List
    , Bytes19/output = Bytes19/output
    , Bytes19List/output = Bytes19List/output
    , Bytes20 = Bytes20
    , Bytes20List = Bytes20List
    , Bytes20/build = Bytes20/build
    , Bytes20List/build = Bytes20List/build
    , Bytes20/hex = Bytes20/hex
    , Bytes20/fromHex = Bytes20/fromHex
    , evm/bytes20 = λ(v : Text) → λ(d : Def) → { _bytes20 = v, def = d }
    , evm/bytes20_list =
        λ(v : Text) → λ(d : Def) → { _bytes20_list = v, def = d }
    , evm/bytes20/value = λ(v : Bytes20) → v._bytes20
    , evm/bytes20_list/value = λ(v : Bytes20List) → v._bytes20_list
    , evm/bytes20/Type = Bytes20
    , evm/bytes20_list/Type = Bytes20List
    , Bytes20/output = Bytes20/output
    , Bytes20List/output = Bytes20List/output
    , Bytes21 = Bytes21
    , Bytes21List = Bytes21List
    , Bytes21/build = Bytes21/build
    , Bytes21List/build = Bytes21List/build
    , Bytes21/hex = Bytes21/hex
    , Bytes21/fromHex = Bytes21/fromHex
    , evm/bytes21 = λ(v : Text) → λ(d : Def) → { _bytes21 = v, def = d }
    , evm/bytes21_list =
        λ(v : Text) → λ(d : Def) → { _bytes21_list = v, def = d }
    , evm/bytes21/value = λ(v : Bytes21) → v._bytes21
    , evm/bytes21_list/value = λ(v : Bytes21List) → v._bytes21_list
    , evm/bytes21/Type = Bytes21
    , evm/bytes21_list/Type = Bytes21List
    , Bytes21/output = Bytes21/output
    , Bytes21List/output = Bytes21List/output
    , Bytes22 = Bytes22
    , Bytes22List = Bytes22List
    , Bytes22/build = Bytes22/build
    , Bytes22List/build = Bytes22List/build
    , Bytes22/hex = Bytes22/hex
    , Bytes22/fromHex = Bytes22/fromHex
    , evm/bytes22 = λ(v : Text) → λ(d : Def) → { _bytes22 = v, def = d }
    , evm/bytes22_list =
        λ(v : Text) → λ(d : Def) → { _bytes22_list = v, def = d }
    , evm/bytes22/value = λ(v : Bytes22) → v._bytes22
    , evm/bytes22_list/value = λ(v : Bytes22List) → v._bytes22_list
    , evm/bytes22/Type = Bytes22
    , evm/bytes22_list/Type = Bytes22List
    , Bytes22/output = Bytes22/output
    , Bytes22List/output = Bytes22List/output
    , Bytes23 = Bytes23
    , Bytes23List = Bytes23List
    , Bytes23/build = Bytes23/build
    , Bytes23List/build = Bytes23List/build
    , Bytes23/hex = Bytes23/hex
    , Bytes23/fromHex = Bytes23/fromHex
    , evm/bytes23 = λ(v : Text) → λ(d : Def) → { _bytes23 = v, def = d }
    , evm/bytes23_list =
        λ(v : Text) → λ(d : Def) → { _bytes23_list = v, def = d }
    , evm/bytes23/value = λ(v : Bytes23) → v._bytes23
    , evm/bytes23_list/value = λ(v : Bytes23List) → v._bytes23_list
    , evm/bytes23/Type = Bytes23
    , evm/bytes23_list/Type = Bytes23List
    , Bytes23/output = Bytes23/output
    , Bytes23List/output = Bytes23List/output
    , Bytes24 = Bytes24
    , Bytes24List = Bytes24List
    , Bytes24/build = Bytes24/build
    , Bytes24List/build = Bytes24List/build
    , Bytes24/hex = Bytes24/hex
    , Bytes24/fromHex = Bytes24/fromHex
    , evm/bytes24 = λ(v : Text) → λ(d : Def) → { _bytes24 = v, def = d }
    , evm/bytes24_list =
        λ(v : Text) → λ(d : Def) → { _bytes24_list = v, def = d }
    , evm/bytes24/value = λ(v : Bytes24) → v._bytes24
    , evm/bytes24_list/value = λ(v : Bytes24List) → v._bytes24_list
    , evm/bytes24/Type = Bytes24
    , evm/bytes24_list/Type = Bytes24List
    , Bytes24/output = Bytes24/output
    , Bytes24List/output = Bytes24List/output
    , Bytes25 = Bytes25
    , Bytes25List = Bytes25List
    , Bytes25/build = Bytes25/build
    , Bytes25List/build = Bytes25List/build
    , Bytes25/hex = Bytes25/hex
    , Bytes25/fromHex = Bytes25/fromHex
    , evm/bytes25 = λ(v : Text) → λ(d : Def) → { _bytes25 = v, def = d }
    , evm/bytes25_list =
        λ(v : Text) → λ(d : Def) → { _bytes25_list = v, def = d }
    , evm/bytes25/value = λ(v : Bytes25) → v._bytes25
    , evm/bytes25_list/value = λ(v : Bytes25List) → v._bytes25_list
    , evm/bytes25/Type = Bytes25
    , evm/bytes25_list/Type = Bytes25List
    , Bytes25/output = Bytes25/output
    , Bytes25List/output = Bytes25List/output
    , Bytes26 = Bytes26
    , Bytes26List = Bytes26List
    , Bytes26/build = Bytes26/build
    , Bytes26List/build = Bytes26List/build
    , Bytes26/hex = Bytes26/hex
    , Bytes26/fromHex = Bytes26/fromHex
    , evm/bytes26 = λ(v : Text) → λ(d : Def) → { _bytes26 = v, def = d }
    , evm/bytes26_list =
        λ(v : Text) → λ(d : Def) → { _bytes26_list = v, def = d }
    , evm/bytes26/value = λ(v : Bytes26) → v._bytes26
    , evm/bytes26_list/value = λ(v : Bytes26List) → v._bytes26_list
    , evm/bytes26/Type = Bytes26
    , evm/bytes26_list/Type = Bytes26List
    , Bytes26/output = Bytes26/output
    , Bytes26List/output = Bytes26List/output
    , Bytes27 = Bytes27
    , Bytes27List = Bytes27List
    , Bytes27/build = Bytes27/build
    , Bytes27List/build = Bytes27List/build
    , Bytes27/hex = Bytes27/hex
    , Bytes27/fromHex = Bytes27/fromHex
    , evm/bytes27 = λ(v : Text) → λ(d : Def) → { _bytes27 = v, def = d }
    , evm/bytes27_list =
        λ(v : Text) → λ(d : Def) → { _bytes27_list = v, def = d }
    , evm/bytes27/value = λ(v : Bytes27) → v._bytes27
    , evm/bytes27_list/value = λ(v : Bytes27List) → v._bytes27_list
    , evm/bytes27/Type = Bytes27
    , evm/bytes27_list/Type = Bytes27List
    , Bytes27/output = Bytes27/output
    , Bytes27List/output = Bytes27List/output
    , Bytes28 = Bytes28
    , Bytes28List = Bytes28List
    , Bytes28/build = Bytes28/build
    , Bytes28List/build = Bytes28List/build
    , Bytes28/hex = Bytes28/hex
    , Bytes28/fromHex = Bytes28/fromHex
    , evm/bytes28 = λ(v : Text) → λ(d : Def) → { _bytes28 = v, def = d }
    , evm/bytes28_list =
        λ(v : Text) → λ(d : Def) → { _bytes28_list = v, def = d }
    , evm/bytes28/value = λ(v : Bytes28) → v._bytes28
    , evm/bytes28_list/value = λ(v : Bytes28List) → v._bytes28_list
    , evm/bytes28/Type = Bytes28
    , evm/bytes28_list/Type = Bytes28List
    , Bytes28/output = Bytes28/output
    , Bytes28List/output = Bytes28List/output
    , Bytes29 = Bytes29
    , Bytes29List = Bytes29List
    , Bytes29/build = Bytes29/build
    , Bytes29List/build = Bytes29List/build
    , Bytes29/hex = Bytes29/hex
    , Bytes29/fromHex = Bytes29/fromHex
    , evm/bytes29 = λ(v : Text) → λ(d : Def) → { _bytes29 = v, def = d }
    , evm/bytes29_list =
        λ(v : Text) → λ(d : Def) → { _bytes29_list = v, def = d }
    , evm/bytes29/value = λ(v : Bytes29) → v._bytes29
    , evm/bytes29_list/value = λ(v : Bytes29List) → v._bytes29_list
    , evm/bytes29/Type = Bytes29
    , evm/bytes29_list/Type = Bytes29List
    , Bytes29/output = Bytes29/output
    , Bytes29List/output = Bytes29List/output
    , Bytes30 = Bytes30
    , Bytes30List = Bytes30List
    , Bytes30/build = Bytes30/build
    , Bytes30List/build = Bytes30List/build
    , Bytes30/hex = Bytes30/hex
    , Bytes30/fromHex = Bytes30/fromHex
    , evm/bytes30 = λ(v : Text) → λ(d : Def) → { _bytes30 = v, def = d }
    , evm/bytes30_list =
        λ(v : Text) → λ(d : Def) → { _bytes30_list = v, def = d }
    , evm/bytes30/value = λ(v : Bytes30) → v._bytes30
    , evm/bytes30_list/value = λ(v : Bytes30List) → v._bytes30_list
    , evm/bytes30/Type = Bytes30
    , evm/bytes30_list/Type = Bytes30List
    , Bytes30/output = Bytes30/output
    , Bytes30List/output = Bytes30List/output
    , Bytes31 = Bytes31
    , Bytes31List = Bytes31List
    , Bytes31/build = Bytes31/build
    , Bytes31List/build = Bytes31List/build
    , Bytes31/hex = Bytes31/hex
    , Bytes31/fromHex = Bytes31/fromHex
    , evm/bytes31 = λ(v : Text) → λ(d : Def) → { _bytes31 = v, def = d }
    , evm/bytes31_list =
        λ(v : Text) → λ(d : Def) → { _bytes31_list = v, def = d }
    , evm/bytes31/value = λ(v : Bytes31) → v._bytes31
    , evm/bytes31_list/value = λ(v : Bytes31List) → v._bytes31_list
    , evm/bytes31/Type = Bytes31
    , evm/bytes31_list/Type = Bytes31List
    , Bytes31/output = Bytes31/output
    , Bytes31List/output = Bytes31List/output
    , Bytes32 = Bytes32
    , Bytes32List = Bytes32List
    , Bytes32/build = Bytes32/build
    , Bytes32List/build = Bytes32List/build
    , Bytes32/hex = Bytes32/hex
    , Bytes32/fromHex = Bytes32/fromHex
    , evm/bytes32 = λ(v : Text) → λ(d : Def) → { _bytes32 = v, def = d }
    , evm/bytes32_list =
        λ(v : Text) → λ(d : Def) → { _bytes32_list = v, def = d }
    , evm/bytes32/value = λ(v : Bytes32) → v._bytes32
    , evm/bytes32_list/value = λ(v : Bytes32List) → v._bytes32_list
    , evm/bytes32/Type = Bytes32
    , evm/bytes32_list/Type = Bytes32List
    , Bytes32/output = Bytes32/output
    , Bytes32List/output = Bytes32List/output
    , Uint8 = Uint8
    , Uint8List = Uint8List
    , Uint8/build = Uint8/build
    , Uint8List/build = Uint8List/build
    , Uint8/hex = Uint8/hex
    , Uint8/fromHex = Uint8/fromHex
    , evm/uint8 = λ(v : Text) → λ(d : Def) → { _uint8 = v, def = d }
    , evm/uint8_list = λ(v : Text) → λ(d : Def) → { _uint8_list = v, def = d }
    , evm/uint8/value = λ(v : Uint8) → v._uint8
    , evm/uint8_list/value = λ(v : Uint8List) → v._uint8_list
    , evm/uint8/Type = Uint8
    , evm/uint8_list/Type = Uint8List
    , Uint8/output = Uint8/output
    , Uint8List/output = Uint8List/output
    , Uint16 = Uint16
    , Uint16List = Uint16List
    , Uint16/build = Uint16/build
    , Uint16List/build = Uint16List/build
    , Uint16/hex = Uint16/hex
    , Uint16/fromHex = Uint16/fromHex
    , evm/uint16 = λ(v : Text) → λ(d : Def) → { _uint16 = v, def = d }
    , evm/uint16_list = λ(v : Text) → λ(d : Def) → { _uint16_list = v, def = d }
    , evm/uint16/value = λ(v : Uint16) → v._uint16
    , evm/uint16_list/value = λ(v : Uint16List) → v._uint16_list
    , evm/uint16/Type = Uint16
    , evm/uint16_list/Type = Uint16List
    , Uint16/output = Uint16/output
    , Uint16List/output = Uint16List/output
    , Uint24 = Uint24
    , Uint24List = Uint24List
    , Uint24/build = Uint24/build
    , Uint24List/build = Uint24List/build
    , Uint24/hex = Uint24/hex
    , Uint24/fromHex = Uint24/fromHex
    , evm/uint24 = λ(v : Text) → λ(d : Def) → { _uint24 = v, def = d }
    , evm/uint24_list = λ(v : Text) → λ(d : Def) → { _uint24_list = v, def = d }
    , evm/uint24/value = λ(v : Uint24) → v._uint24
    , evm/uint24_list/value = λ(v : Uint24List) → v._uint24_list
    , evm/uint24/Type = Uint24
    , evm/uint24_list/Type = Uint24List
    , Uint24/output = Uint24/output
    , Uint24List/output = Uint24List/output
    , Uint32 = Uint32
    , Uint32List = Uint32List
    , Uint32/build = Uint32/build
    , Uint32List/build = Uint32List/build
    , Uint32/hex = Uint32/hex
    , Uint32/fromHex = Uint32/fromHex
    , evm/uint32 = λ(v : Text) → λ(d : Def) → { _uint32 = v, def = d }
    , evm/uint32_list = λ(v : Text) → λ(d : Def) → { _uint32_list = v, def = d }
    , evm/uint32/value = λ(v : Uint32) → v._uint32
    , evm/uint32_list/value = λ(v : Uint32List) → v._uint32_list
    , evm/uint32/Type = Uint32
    , evm/uint32_list/Type = Uint32List
    , Uint32/output = Uint32/output
    , Uint32List/output = Uint32List/output
    , Uint40 = Uint40
    , Uint40List = Uint40List
    , Uint40/build = Uint40/build
    , Uint40List/build = Uint40List/build
    , Uint40/hex = Uint40/hex
    , Uint40/fromHex = Uint40/fromHex
    , evm/uint40 = λ(v : Text) → λ(d : Def) → { _uint40 = v, def = d }
    , evm/uint40_list = λ(v : Text) → λ(d : Def) → { _uint40_list = v, def = d }
    , evm/uint40/value = λ(v : Uint40) → v._uint40
    , evm/uint40_list/value = λ(v : Uint40List) → v._uint40_list
    , evm/uint40/Type = Uint40
    , evm/uint40_list/Type = Uint40List
    , Uint40/output = Uint40/output
    , Uint40List/output = Uint40List/output
    , Uint48 = Uint48
    , Uint48List = Uint48List
    , Uint48/build = Uint48/build
    , Uint48List/build = Uint48List/build
    , Uint48/hex = Uint48/hex
    , Uint48/fromHex = Uint48/fromHex
    , evm/uint48 = λ(v : Text) → λ(d : Def) → { _uint48 = v, def = d }
    , evm/uint48_list = λ(v : Text) → λ(d : Def) → { _uint48_list = v, def = d }
    , evm/uint48/value = λ(v : Uint48) → v._uint48
    , evm/uint48_list/value = λ(v : Uint48List) → v._uint48_list
    , evm/uint48/Type = Uint48
    , evm/uint48_list/Type = Uint48List
    , Uint48/output = Uint48/output
    , Uint48List/output = Uint48List/output
    , Uint56 = Uint56
    , Uint56List = Uint56List
    , Uint56/build = Uint56/build
    , Uint56List/build = Uint56List/build
    , Uint56/hex = Uint56/hex
    , Uint56/fromHex = Uint56/fromHex
    , evm/uint56 = λ(v : Text) → λ(d : Def) → { _uint56 = v, def = d }
    , evm/uint56_list = λ(v : Text) → λ(d : Def) → { _uint56_list = v, def = d }
    , evm/uint56/value = λ(v : Uint56) → v._uint56
    , evm/uint56_list/value = λ(v : Uint56List) → v._uint56_list
    , evm/uint56/Type = Uint56
    , evm/uint56_list/Type = Uint56List
    , Uint56/output = Uint56/output
    , Uint56List/output = Uint56List/output
    , Uint64 = Uint64
    , Uint64List = Uint64List
    , Uint64/build = Uint64/build
    , Uint64List/build = Uint64List/build
    , Uint64/hex = Uint64/hex
    , Uint64/fromHex = Uint64/fromHex
    , evm/uint64 = λ(v : Text) → λ(d : Def) → { _uint64 = v, def = d }
    , evm/uint64_list = λ(v : Text) → λ(d : Def) → { _uint64_list = v, def = d }
    , evm/uint64/value = λ(v : Uint64) → v._uint64
    , evm/uint64_list/value = λ(v : Uint64List) → v._uint64_list
    , evm/uint64/Type = Uint64
    , evm/uint64_list/Type = Uint64List
    , Uint64/output = Uint64/output
    , Uint64List/output = Uint64List/output
    , Uint72 = Uint72
    , Uint72List = Uint72List
    , Uint72/build = Uint72/build
    , Uint72List/build = Uint72List/build
    , Uint72/hex = Uint72/hex
    , Uint72/fromHex = Uint72/fromHex
    , evm/uint72 = λ(v : Text) → λ(d : Def) → { _uint72 = v, def = d }
    , evm/uint72_list = λ(v : Text) → λ(d : Def) → { _uint72_list = v, def = d }
    , evm/uint72/value = λ(v : Uint72) → v._uint72
    , evm/uint72_list/value = λ(v : Uint72List) → v._uint72_list
    , evm/uint72/Type = Uint72
    , evm/uint72_list/Type = Uint72List
    , Uint72/output = Uint72/output
    , Uint72List/output = Uint72List/output
    , Uint80 = Uint80
    , Uint80List = Uint80List
    , Uint80/build = Uint80/build
    , Uint80List/build = Uint80List/build
    , Uint80/hex = Uint80/hex
    , Uint80/fromHex = Uint80/fromHex
    , evm/uint80 = λ(v : Text) → λ(d : Def) → { _uint80 = v, def = d }
    , evm/uint80_list = λ(v : Text) → λ(d : Def) → { _uint80_list = v, def = d }
    , evm/uint80/value = λ(v : Uint80) → v._uint80
    , evm/uint80_list/value = λ(v : Uint80List) → v._uint80_list
    , evm/uint80/Type = Uint80
    , evm/uint80_list/Type = Uint80List
    , Uint80/output = Uint80/output
    , Uint80List/output = Uint80List/output
    , Uint88 = Uint88
    , Uint88List = Uint88List
    , Uint88/build = Uint88/build
    , Uint88List/build = Uint88List/build
    , Uint88/hex = Uint88/hex
    , Uint88/fromHex = Uint88/fromHex
    , evm/uint88 = λ(v : Text) → λ(d : Def) → { _uint88 = v, def = d }
    , evm/uint88_list = λ(v : Text) → λ(d : Def) → { _uint88_list = v, def = d }
    , evm/uint88/value = λ(v : Uint88) → v._uint88
    , evm/uint88_list/value = λ(v : Uint88List) → v._uint88_list
    , evm/uint88/Type = Uint88
    , evm/uint88_list/Type = Uint88List
    , Uint88/output = Uint88/output
    , Uint88List/output = Uint88List/output
    , Uint96 = Uint96
    , Uint96List = Uint96List
    , Uint96/build = Uint96/build
    , Uint96List/build = Uint96List/build
    , Uint96/hex = Uint96/hex
    , Uint96/fromHex = Uint96/fromHex
    , evm/uint96 = λ(v : Text) → λ(d : Def) → { _uint96 = v, def = d }
    , evm/uint96_list = λ(v : Text) → λ(d : Def) → { _uint96_list = v, def = d }
    , evm/uint96/value = λ(v : Uint96) → v._uint96
    , evm/uint96_list/value = λ(v : Uint96List) → v._uint96_list
    , evm/uint96/Type = Uint96
    , evm/uint96_list/Type = Uint96List
    , Uint96/output = Uint96/output
    , Uint96List/output = Uint96List/output
    , Uint104 = Uint104
    , Uint104List = Uint104List
    , Uint104/build = Uint104/build
    , Uint104List/build = Uint104List/build
    , Uint104/hex = Uint104/hex
    , Uint104/fromHex = Uint104/fromHex
    , evm/uint104 = λ(v : Text) → λ(d : Def) → { _uint104 = v, def = d }
    , evm/uint104_list =
        λ(v : Text) → λ(d : Def) → { _uint104_list = v, def = d }
    , evm/uint104/value = λ(v : Uint104) → v._uint104
    , evm/uint104_list/value = λ(v : Uint104List) → v._uint104_list
    , evm/uint104/Type = Uint104
    , evm/uint104_list/Type = Uint104List
    , Uint104/output = Uint104/output
    , Uint104List/output = Uint104List/output
    , Uint112 = Uint112
    , Uint112List = Uint112List
    , Uint112/build = Uint112/build
    , Uint112List/build = Uint112List/build
    , Uint112/hex = Uint112/hex
    , Uint112/fromHex = Uint112/fromHex
    , evm/uint112 = λ(v : Text) → λ(d : Def) → { _uint112 = v, def = d }
    , evm/uint112_list =
        λ(v : Text) → λ(d : Def) → { _uint112_list = v, def = d }
    , evm/uint112/value = λ(v : Uint112) → v._uint112
    , evm/uint112_list/value = λ(v : Uint112List) → v._uint112_list
    , evm/uint112/Type = Uint112
    , evm/uint112_list/Type = Uint112List
    , Uint112/output = Uint112/output
    , Uint112List/output = Uint112List/output
    , Uint120 = Uint120
    , Uint120List = Uint120List
    , Uint120/build = Uint120/build
    , Uint120List/build = Uint120List/build
    , Uint120/hex = Uint120/hex
    , Uint120/fromHex = Uint120/fromHex
    , evm/uint120 = λ(v : Text) → λ(d : Def) → { _uint120 = v, def = d }
    , evm/uint120_list =
        λ(v : Text) → λ(d : Def) → { _uint120_list = v, def = d }
    , evm/uint120/value = λ(v : Uint120) → v._uint120
    , evm/uint120_list/value = λ(v : Uint120List) → v._uint120_list
    , evm/uint120/Type = Uint120
    , evm/uint120_list/Type = Uint120List
    , Uint120/output = Uint120/output
    , Uint120List/output = Uint120List/output
    , Uint128 = Uint128
    , Uint128List = Uint128List
    , Uint128/build = Uint128/build
    , Uint128List/build = Uint128List/build
    , Uint128/hex = Uint128/hex
    , Uint128/fromHex = Uint128/fromHex
    , evm/uint128 = λ(v : Text) → λ(d : Def) → { _uint128 = v, def = d }
    , evm/uint128_list =
        λ(v : Text) → λ(d : Def) → { _uint128_list = v, def = d }
    , evm/uint128/value = λ(v : Uint128) → v._uint128
    , evm/uint128_list/value = λ(v : Uint128List) → v._uint128_list
    , evm/uint128/Type = Uint128
    , evm/uint128_list/Type = Uint128List
    , Uint128/output = Uint128/output
    , Uint128List/output = Uint128List/output
    , Uint136 = Uint136
    , Uint136List = Uint136List
    , Uint136/build = Uint136/build
    , Uint136List/build = Uint136List/build
    , Uint136/hex = Uint136/hex
    , Uint136/fromHex = Uint136/fromHex
    , evm/uint136 = λ(v : Text) → λ(d : Def) → { _uint136 = v, def = d }
    , evm/uint136_list =
        λ(v : Text) → λ(d : Def) → { _uint136_list = v, def = d }
    , evm/uint136/value = λ(v : Uint136) → v._uint136
    , evm/uint136_list/value = λ(v : Uint136List) → v._uint136_list
    , evm/uint136/Type = Uint136
    , evm/uint136_list/Type = Uint136List
    , Uint136/output = Uint136/output
    , Uint136List/output = Uint136List/output
    , Uint144 = Uint144
    , Uint144List = Uint144List
    , Uint144/build = Uint144/build
    , Uint144List/build = Uint144List/build
    , Uint144/hex = Uint144/hex
    , Uint144/fromHex = Uint144/fromHex
    , evm/uint144 = λ(v : Text) → λ(d : Def) → { _uint144 = v, def = d }
    , evm/uint144_list =
        λ(v : Text) → λ(d : Def) → { _uint144_list = v, def = d }
    , evm/uint144/value = λ(v : Uint144) → v._uint144
    , evm/uint144_list/value = λ(v : Uint144List) → v._uint144_list
    , evm/uint144/Type = Uint144
    , evm/uint144_list/Type = Uint144List
    , Uint144/output = Uint144/output
    , Uint144List/output = Uint144List/output
    , Uint152 = Uint152
    , Uint152List = Uint152List
    , Uint152/build = Uint152/build
    , Uint152List/build = Uint152List/build
    , Uint152/hex = Uint152/hex
    , Uint152/fromHex = Uint152/fromHex
    , evm/uint152 = λ(v : Text) → λ(d : Def) → { _uint152 = v, def = d }
    , evm/uint152_list =
        λ(v : Text) → λ(d : Def) → { _uint152_list = v, def = d }
    , evm/uint152/value = λ(v : Uint152) → v._uint152
    , evm/uint152_list/value = λ(v : Uint152List) → v._uint152_list
    , evm/uint152/Type = Uint152
    , evm/uint152_list/Type = Uint152List
    , Uint152/output = Uint152/output
    , Uint152List/output = Uint152List/output
    , Uint160 = Uint160
    , Uint160List = Uint160List
    , Uint160/build = Uint160/build
    , Uint160List/build = Uint160List/build
    , Uint160/hex = Uint160/hex
    , Uint160/fromHex = Uint160/fromHex
    , evm/uint160 = λ(v : Text) → λ(d : Def) → { _uint160 = v, def = d }
    , evm/uint160_list =
        λ(v : Text) → λ(d : Def) → { _uint160_list = v, def = d }
    , evm/uint160/value = λ(v : Uint160) → v._uint160
    , evm/uint160_list/value = λ(v : Uint160List) → v._uint160_list
    , evm/uint160/Type = Uint160
    , evm/uint160_list/Type = Uint160List
    , Uint160/output = Uint160/output
    , Uint160List/output = Uint160List/output
    , Uint168 = Uint168
    , Uint168List = Uint168List
    , Uint168/build = Uint168/build
    , Uint168List/build = Uint168List/build
    , Uint168/hex = Uint168/hex
    , Uint168/fromHex = Uint168/fromHex
    , evm/uint168 = λ(v : Text) → λ(d : Def) → { _uint168 = v, def = d }
    , evm/uint168_list =
        λ(v : Text) → λ(d : Def) → { _uint168_list = v, def = d }
    , evm/uint168/value = λ(v : Uint168) → v._uint168
    , evm/uint168_list/value = λ(v : Uint168List) → v._uint168_list
    , evm/uint168/Type = Uint168
    , evm/uint168_list/Type = Uint168List
    , Uint168/output = Uint168/output
    , Uint168List/output = Uint168List/output
    , Uint176 = Uint176
    , Uint176List = Uint176List
    , Uint176/build = Uint176/build
    , Uint176List/build = Uint176List/build
    , Uint176/hex = Uint176/hex
    , Uint176/fromHex = Uint176/fromHex
    , evm/uint176 = λ(v : Text) → λ(d : Def) → { _uint176 = v, def = d }
    , evm/uint176_list =
        λ(v : Text) → λ(d : Def) → { _uint176_list = v, def = d }
    , evm/uint176/value = λ(v : Uint176) → v._uint176
    , evm/uint176_list/value = λ(v : Uint176List) → v._uint176_list
    , evm/uint176/Type = Uint176
    , evm/uint176_list/Type = Uint176List
    , Uint176/output = Uint176/output
    , Uint176List/output = Uint176List/output
    , Uint184 = Uint184
    , Uint184List = Uint184List
    , Uint184/build = Uint184/build
    , Uint184List/build = Uint184List/build
    , Uint184/hex = Uint184/hex
    , Uint184/fromHex = Uint184/fromHex
    , evm/uint184 = λ(v : Text) → λ(d : Def) → { _uint184 = v, def = d }
    , evm/uint184_list =
        λ(v : Text) → λ(d : Def) → { _uint184_list = v, def = d }
    , evm/uint184/value = λ(v : Uint184) → v._uint184
    , evm/uint184_list/value = λ(v : Uint184List) → v._uint184_list
    , evm/uint184/Type = Uint184
    , evm/uint184_list/Type = Uint184List
    , Uint184/output = Uint184/output
    , Uint184List/output = Uint184List/output
    , Uint192 = Uint192
    , Uint192List = Uint192List
    , Uint192/build = Uint192/build
    , Uint192List/build = Uint192List/build
    , Uint192/hex = Uint192/hex
    , Uint192/fromHex = Uint192/fromHex
    , evm/uint192 = λ(v : Text) → λ(d : Def) → { _uint192 = v, def = d }
    , evm/uint192_list =
        λ(v : Text) → λ(d : Def) → { _uint192_list = v, def = d }
    , evm/uint192/value = λ(v : Uint192) → v._uint192
    , evm/uint192_list/value = λ(v : Uint192List) → v._uint192_list
    , evm/uint192/Type = Uint192
    , evm/uint192_list/Type = Uint192List
    , Uint192/output = Uint192/output
    , Uint192List/output = Uint192List/output
    , Uint200 = Uint200
    , Uint200List = Uint200List
    , Uint200/build = Uint200/build
    , Uint200List/build = Uint200List/build
    , Uint200/hex = Uint200/hex
    , Uint200/fromHex = Uint200/fromHex
    , evm/uint200 = λ(v : Text) → λ(d : Def) → { _uint200 = v, def = d }
    , evm/uint200_list =
        λ(v : Text) → λ(d : Def) → { _uint200_list = v, def = d }
    , evm/uint200/value = λ(v : Uint200) → v._uint200
    , evm/uint200_list/value = λ(v : Uint200List) → v._uint200_list
    , evm/uint200/Type = Uint200
    , evm/uint200_list/Type = Uint200List
    , Uint200/output = Uint200/output
    , Uint200List/output = Uint200List/output
    , Uint208 = Uint208
    , Uint208List = Uint208List
    , Uint208/build = Uint208/build
    , Uint208List/build = Uint208List/build
    , Uint208/hex = Uint208/hex
    , Uint208/fromHex = Uint208/fromHex
    , evm/uint208 = λ(v : Text) → λ(d : Def) → { _uint208 = v, def = d }
    , evm/uint208_list =
        λ(v : Text) → λ(d : Def) → { _uint208_list = v, def = d }
    , evm/uint208/value = λ(v : Uint208) → v._uint208
    , evm/uint208_list/value = λ(v : Uint208List) → v._uint208_list
    , evm/uint208/Type = Uint208
    , evm/uint208_list/Type = Uint208List
    , Uint208/output = Uint208/output
    , Uint208List/output = Uint208List/output
    , Uint216 = Uint216
    , Uint216List = Uint216List
    , Uint216/build = Uint216/build
    , Uint216List/build = Uint216List/build
    , Uint216/hex = Uint216/hex
    , Uint216/fromHex = Uint216/fromHex
    , evm/uint216 = λ(v : Text) → λ(d : Def) → { _uint216 = v, def = d }
    , evm/uint216_list =
        λ(v : Text) → λ(d : Def) → { _uint216_list = v, def = d }
    , evm/uint216/value = λ(v : Uint216) → v._uint216
    , evm/uint216_list/value = λ(v : Uint216List) → v._uint216_list
    , evm/uint216/Type = Uint216
    , evm/uint216_list/Type = Uint216List
    , Uint216/output = Uint216/output
    , Uint216List/output = Uint216List/output
    , Uint224 = Uint224
    , Uint224List = Uint224List
    , Uint224/build = Uint224/build
    , Uint224List/build = Uint224List/build
    , Uint224/hex = Uint224/hex
    , Uint224/fromHex = Uint224/fromHex
    , evm/uint224 = λ(v : Text) → λ(d : Def) → { _uint224 = v, def = d }
    , evm/uint224_list =
        λ(v : Text) → λ(d : Def) → { _uint224_list = v, def = d }
    , evm/uint224/value = λ(v : Uint224) → v._uint224
    , evm/uint224_list/value = λ(v : Uint224List) → v._uint224_list
    , evm/uint224/Type = Uint224
    , evm/uint224_list/Type = Uint224List
    , Uint224/output = Uint224/output
    , Uint224List/output = Uint224List/output
    , Uint232 = Uint232
    , Uint232List = Uint232List
    , Uint232/build = Uint232/build
    , Uint232List/build = Uint232List/build
    , Uint232/hex = Uint232/hex
    , Uint232/fromHex = Uint232/fromHex
    , evm/uint232 = λ(v : Text) → λ(d : Def) → { _uint232 = v, def = d }
    , evm/uint232_list =
        λ(v : Text) → λ(d : Def) → { _uint232_list = v, def = d }
    , evm/uint232/value = λ(v : Uint232) → v._uint232
    , evm/uint232_list/value = λ(v : Uint232List) → v._uint232_list
    , evm/uint232/Type = Uint232
    , evm/uint232_list/Type = Uint232List
    , Uint232/output = Uint232/output
    , Uint232List/output = Uint232List/output
    , Uint240 = Uint240
    , Uint240List = Uint240List
    , Uint240/build = Uint240/build
    , Uint240List/build = Uint240List/build
    , Uint240/hex = Uint240/hex
    , Uint240/fromHex = Uint240/fromHex
    , evm/uint240 = λ(v : Text) → λ(d : Def) → { _uint240 = v, def = d }
    , evm/uint240_list =
        λ(v : Text) → λ(d : Def) → { _uint240_list = v, def = d }
    , evm/uint240/value = λ(v : Uint240) → v._uint240
    , evm/uint240_list/value = λ(v : Uint240List) → v._uint240_list
    , evm/uint240/Type = Uint240
    , evm/uint240_list/Type = Uint240List
    , Uint240/output = Uint240/output
    , Uint240List/output = Uint240List/output
    , Uint248 = Uint248
    , Uint248List = Uint248List
    , Uint248/build = Uint248/build
    , Uint248List/build = Uint248List/build
    , Uint248/hex = Uint248/hex
    , Uint248/fromHex = Uint248/fromHex
    , evm/uint248 = λ(v : Text) → λ(d : Def) → { _uint248 = v, def = d }
    , evm/uint248_list =
        λ(v : Text) → λ(d : Def) → { _uint248_list = v, def = d }
    , evm/uint248/value = λ(v : Uint248) → v._uint248
    , evm/uint248_list/value = λ(v : Uint248List) → v._uint248_list
    , evm/uint248/Type = Uint248
    , evm/uint248_list/Type = Uint248List
    , Uint248/output = Uint248/output
    , Uint248List/output = Uint248List/output
    , Uint256 = Uint256
    , Uint256List = Uint256List
    , Uint256/build = Uint256/build
    , Uint256List/build = Uint256List/build
    , Uint256/hex = Uint256/hex
    , Uint256/fromHex = Uint256/fromHex
    , evm/uint256 = λ(v : Text) → λ(d : Def) → { _uint256 = v, def = d }
    , evm/uint256_list =
        λ(v : Text) → λ(d : Def) → { _uint256_list = v, def = d }
    , evm/uint256/value = λ(v : Uint256) → v._uint256
    , evm/uint256_list/value = λ(v : Uint256List) → v._uint256_list
    , evm/uint256/Type = Uint256
    , evm/uint256_list/Type = Uint256List
    , Uint256/output = Uint256/output
    , Uint256List/output = Uint256List/output
    , Int8 = Int8
    , Int8List = Int8List
    , Int8/build = Int8/build
    , Int8List/build = Int8List/build
    , Int8/hex = Int8/hex
    , Int8/fromHex = Int8/fromHex
    , evm/int8 = λ(v : Text) → λ(d : Def) → { _int8 = v, def = d }
    , evm/int8_list = λ(v : Text) → λ(d : Def) → { _int8_list = v, def = d }
    , evm/int8/value = λ(v : Int8) → v._int8
    , evm/int8_list/value = λ(v : Int8List) → v._int8_list
    , evm/int8/Type = Int8
    , evm/int8_list/Type = Int8List
    , Int8/output = Int8/output
    , Int8List/output = Int8List/output
    , Int16 = Int16
    , Int16List = Int16List
    , Int16/build = Int16/build
    , Int16List/build = Int16List/build
    , Int16/hex = Int16/hex
    , Int16/fromHex = Int16/fromHex
    , evm/int16 = λ(v : Text) → λ(d : Def) → { _int16 = v, def = d }
    , evm/int16_list = λ(v : Text) → λ(d : Def) → { _int16_list = v, def = d }
    , evm/int16/value = λ(v : Int16) → v._int16
    , evm/int16_list/value = λ(v : Int16List) → v._int16_list
    , evm/int16/Type = Int16
    , evm/int16_list/Type = Int16List
    , Int16/output = Int16/output
    , Int16List/output = Int16List/output
    , Int24 = Int24
    , Int24List = Int24List
    , Int24/build = Int24/build
    , Int24List/build = Int24List/build
    , Int24/hex = Int24/hex
    , Int24/fromHex = Int24/fromHex
    , evm/int24 = λ(v : Text) → λ(d : Def) → { _int24 = v, def = d }
    , evm/int24_list = λ(v : Text) → λ(d : Def) → { _int24_list = v, def = d }
    , evm/int24/value = λ(v : Int24) → v._int24
    , evm/int24_list/value = λ(v : Int24List) → v._int24_list
    , evm/int24/Type = Int24
    , evm/int24_list/Type = Int24List
    , Int24/output = Int24/output
    , Int24List/output = Int24List/output
    , Int32 = Int32
    , Int32List = Int32List
    , Int32/build = Int32/build
    , Int32List/build = Int32List/build
    , Int32/hex = Int32/hex
    , Int32/fromHex = Int32/fromHex
    , evm/int32 = λ(v : Text) → λ(d : Def) → { _int32 = v, def = d }
    , evm/int32_list = λ(v : Text) → λ(d : Def) → { _int32_list = v, def = d }
    , evm/int32/value = λ(v : Int32) → v._int32
    , evm/int32_list/value = λ(v : Int32List) → v._int32_list
    , evm/int32/Type = Int32
    , evm/int32_list/Type = Int32List
    , Int32/output = Int32/output
    , Int32List/output = Int32List/output
    , Int40 = Int40
    , Int40List = Int40List
    , Int40/build = Int40/build
    , Int40List/build = Int40List/build
    , Int40/hex = Int40/hex
    , Int40/fromHex = Int40/fromHex
    , evm/int40 = λ(v : Text) → λ(d : Def) → { _int40 = v, def = d }
    , evm/int40_list = λ(v : Text) → λ(d : Def) → { _int40_list = v, def = d }
    , evm/int40/value = λ(v : Int40) → v._int40
    , evm/int40_list/value = λ(v : Int40List) → v._int40_list
    , evm/int40/Type = Int40
    , evm/int40_list/Type = Int40List
    , Int40/output = Int40/output
    , Int40List/output = Int40List/output
    , Int48 = Int48
    , Int48List = Int48List
    , Int48/build = Int48/build
    , Int48List/build = Int48List/build
    , Int48/hex = Int48/hex
    , Int48/fromHex = Int48/fromHex
    , evm/int48 = λ(v : Text) → λ(d : Def) → { _int48 = v, def = d }
    , evm/int48_list = λ(v : Text) → λ(d : Def) → { _int48_list = v, def = d }
    , evm/int48/value = λ(v : Int48) → v._int48
    , evm/int48_list/value = λ(v : Int48List) → v._int48_list
    , evm/int48/Type = Int48
    , evm/int48_list/Type = Int48List
    , Int48/output = Int48/output
    , Int48List/output = Int48List/output
    , Int56 = Int56
    , Int56List = Int56List
    , Int56/build = Int56/build
    , Int56List/build = Int56List/build
    , Int56/hex = Int56/hex
    , Int56/fromHex = Int56/fromHex
    , evm/int56 = λ(v : Text) → λ(d : Def) → { _int56 = v, def = d }
    , evm/int56_list = λ(v : Text) → λ(d : Def) → { _int56_list = v, def = d }
    , evm/int56/value = λ(v : Int56) → v._int56
    , evm/int56_list/value = λ(v : Int56List) → v._int56_list
    , evm/int56/Type = Int56
    , evm/int56_list/Type = Int56List
    , Int56/output = Int56/output
    , Int56List/output = Int56List/output
    , Int64 = Int64
    , Int64List = Int64List
    , Int64/build = Int64/build
    , Int64List/build = Int64List/build
    , Int64/hex = Int64/hex
    , Int64/fromHex = Int64/fromHex
    , evm/int64 = λ(v : Text) → λ(d : Def) → { _int64 = v, def = d }
    , evm/int64_list = λ(v : Text) → λ(d : Def) → { _int64_list = v, def = d }
    , evm/int64/value = λ(v : Int64) → v._int64
    , evm/int64_list/value = λ(v : Int64List) → v._int64_list
    , evm/int64/Type = Int64
    , evm/int64_list/Type = Int64List
    , Int64/output = Int64/output
    , Int64List/output = Int64List/output
    , Int72 = Int72
    , Int72List = Int72List
    , Int72/build = Int72/build
    , Int72List/build = Int72List/build
    , Int72/hex = Int72/hex
    , Int72/fromHex = Int72/fromHex
    , evm/int72 = λ(v : Text) → λ(d : Def) → { _int72 = v, def = d }
    , evm/int72_list = λ(v : Text) → λ(d : Def) → { _int72_list = v, def = d }
    , evm/int72/value = λ(v : Int72) → v._int72
    , evm/int72_list/value = λ(v : Int72List) → v._int72_list
    , evm/int72/Type = Int72
    , evm/int72_list/Type = Int72List
    , Int72/output = Int72/output
    , Int72List/output = Int72List/output
    , Int80 = Int80
    , Int80List = Int80List
    , Int80/build = Int80/build
    , Int80List/build = Int80List/build
    , Int80/hex = Int80/hex
    , Int80/fromHex = Int80/fromHex
    , evm/int80 = λ(v : Text) → λ(d : Def) → { _int80 = v, def = d }
    , evm/int80_list = λ(v : Text) → λ(d : Def) → { _int80_list = v, def = d }
    , evm/int80/value = λ(v : Int80) → v._int80
    , evm/int80_list/value = λ(v : Int80List) → v._int80_list
    , evm/int80/Type = Int80
    , evm/int80_list/Type = Int80List
    , Int80/output = Int80/output
    , Int80List/output = Int80List/output
    , Int88 = Int88
    , Int88List = Int88List
    , Int88/build = Int88/build
    , Int88List/build = Int88List/build
    , Int88/hex = Int88/hex
    , Int88/fromHex = Int88/fromHex
    , evm/int88 = λ(v : Text) → λ(d : Def) → { _int88 = v, def = d }
    , evm/int88_list = λ(v : Text) → λ(d : Def) → { _int88_list = v, def = d }
    , evm/int88/value = λ(v : Int88) → v._int88
    , evm/int88_list/value = λ(v : Int88List) → v._int88_list
    , evm/int88/Type = Int88
    , evm/int88_list/Type = Int88List
    , Int88/output = Int88/output
    , Int88List/output = Int88List/output
    , Int96 = Int96
    , Int96List = Int96List
    , Int96/build = Int96/build
    , Int96List/build = Int96List/build
    , Int96/hex = Int96/hex
    , Int96/fromHex = Int96/fromHex
    , evm/int96 = λ(v : Text) → λ(d : Def) → { _int96 = v, def = d }
    , evm/int96_list = λ(v : Text) → λ(d : Def) → { _int96_list = v, def = d }
    , evm/int96/value = λ(v : Int96) → v._int96
    , evm/int96_list/value = λ(v : Int96List) → v._int96_list
    , evm/int96/Type = Int96
    , evm/int96_list/Type = Int96List
    , Int96/output = Int96/output
    , Int96List/output = Int96List/output
    , Int104 = Int104
    , Int104List = Int104List
    , Int104/build = Int104/build
    , Int104List/build = Int104List/build
    , Int104/hex = Int104/hex
    , Int104/fromHex = Int104/fromHex
    , evm/int104 = λ(v : Text) → λ(d : Def) → { _int104 = v, def = d }
    , evm/int104_list = λ(v : Text) → λ(d : Def) → { _int104_list = v, def = d }
    , evm/int104/value = λ(v : Int104) → v._int104
    , evm/int104_list/value = λ(v : Int104List) → v._int104_list
    , evm/int104/Type = Int104
    , evm/int104_list/Type = Int104List
    , Int104/output = Int104/output
    , Int104List/output = Int104List/output
    , Int112 = Int112
    , Int112List = Int112List
    , Int112/build = Int112/build
    , Int112List/build = Int112List/build
    , Int112/hex = Int112/hex
    , Int112/fromHex = Int112/fromHex
    , evm/int112 = λ(v : Text) → λ(d : Def) → { _int112 = v, def = d }
    , evm/int112_list = λ(v : Text) → λ(d : Def) → { _int112_list = v, def = d }
    , evm/int112/value = λ(v : Int112) → v._int112
    , evm/int112_list/value = λ(v : Int112List) → v._int112_list
    , evm/int112/Type = Int112
    , evm/int112_list/Type = Int112List
    , Int112/output = Int112/output
    , Int112List/output = Int112List/output
    , Int120 = Int120
    , Int120List = Int120List
    , Int120/build = Int120/build
    , Int120List/build = Int120List/build
    , Int120/hex = Int120/hex
    , Int120/fromHex = Int120/fromHex
    , evm/int120 = λ(v : Text) → λ(d : Def) → { _int120 = v, def = d }
    , evm/int120_list = λ(v : Text) → λ(d : Def) → { _int120_list = v, def = d }
    , evm/int120/value = λ(v : Int120) → v._int120
    , evm/int120_list/value = λ(v : Int120List) → v._int120_list
    , evm/int120/Type = Int120
    , evm/int120_list/Type = Int120List
    , Int120/output = Int120/output
    , Int120List/output = Int120List/output
    , Int128 = Int128
    , Int128List = Int128List
    , Int128/build = Int128/build
    , Int128List/build = Int128List/build
    , Int128/hex = Int128/hex
    , Int128/fromHex = Int128/fromHex
    , evm/int128 = λ(v : Text) → λ(d : Def) → { _int128 = v, def = d }
    , evm/int128_list = λ(v : Text) → λ(d : Def) → { _int128_list = v, def = d }
    , evm/int128/value = λ(v : Int128) → v._int128
    , evm/int128_list/value = λ(v : Int128List) → v._int128_list
    , evm/int128/Type = Int128
    , evm/int128_list/Type = Int128List
    , Int128/output = Int128/output
    , Int128List/output = Int128List/output
    , Int136 = Int136
    , Int136List = Int136List
    , Int136/build = Int136/build
    , Int136List/build = Int136List/build
    , Int136/hex = Int136/hex
    , Int136/fromHex = Int136/fromHex
    , evm/int136 = λ(v : Text) → λ(d : Def) → { _int136 = v, def = d }
    , evm/int136_list = λ(v : Text) → λ(d : Def) → { _int136_list = v, def = d }
    , evm/int136/value = λ(v : Int136) → v._int136
    , evm/int136_list/value = λ(v : Int136List) → v._int136_list
    , evm/int136/Type = Int136
    , evm/int136_list/Type = Int136List
    , Int136/output = Int136/output
    , Int136List/output = Int136List/output
    , Int144 = Int144
    , Int144List = Int144List
    , Int144/build = Int144/build
    , Int144List/build = Int144List/build
    , Int144/hex = Int144/hex
    , Int144/fromHex = Int144/fromHex
    , evm/int144 = λ(v : Text) → λ(d : Def) → { _int144 = v, def = d }
    , evm/int144_list = λ(v : Text) → λ(d : Def) → { _int144_list = v, def = d }
    , evm/int144/value = λ(v : Int144) → v._int144
    , evm/int144_list/value = λ(v : Int144List) → v._int144_list
    , evm/int144/Type = Int144
    , evm/int144_list/Type = Int144List
    , Int144/output = Int144/output
    , Int144List/output = Int144List/output
    , Int152 = Int152
    , Int152List = Int152List
    , Int152/build = Int152/build
    , Int152List/build = Int152List/build
    , Int152/hex = Int152/hex
    , Int152/fromHex = Int152/fromHex
    , evm/int152 = λ(v : Text) → λ(d : Def) → { _int152 = v, def = d }
    , evm/int152_list = λ(v : Text) → λ(d : Def) → { _int152_list = v, def = d }
    , evm/int152/value = λ(v : Int152) → v._int152
    , evm/int152_list/value = λ(v : Int152List) → v._int152_list
    , evm/int152/Type = Int152
    , evm/int152_list/Type = Int152List
    , Int152/output = Int152/output
    , Int152List/output = Int152List/output
    , Int160 = Int160
    , Int160List = Int160List
    , Int160/build = Int160/build
    , Int160List/build = Int160List/build
    , Int160/hex = Int160/hex
    , Int160/fromHex = Int160/fromHex
    , evm/int160 = λ(v : Text) → λ(d : Def) → { _int160 = v, def = d }
    , evm/int160_list = λ(v : Text) → λ(d : Def) → { _int160_list = v, def = d }
    , evm/int160/value = λ(v : Int160) → v._int160
    , evm/int160_list/value = λ(v : Int160List) → v._int160_list
    , evm/int160/Type = Int160
    , evm/int160_list/Type = Int160List
    , Int160/output = Int160/output
    , Int160List/output = Int160List/output
    , Int168 = Int168
    , Int168List = Int168List
    , Int168/build = Int168/build
    , Int168List/build = Int168List/build
    , Int168/hex = Int168/hex
    , Int168/fromHex = Int168/fromHex
    , evm/int168 = λ(v : Text) → λ(d : Def) → { _int168 = v, def = d }
    , evm/int168_list = λ(v : Text) → λ(d : Def) → { _int168_list = v, def = d }
    , evm/int168/value = λ(v : Int168) → v._int168
    , evm/int168_list/value = λ(v : Int168List) → v._int168_list
    , evm/int168/Type = Int168
    , evm/int168_list/Type = Int168List
    , Int168/output = Int168/output
    , Int168List/output = Int168List/output
    , Int176 = Int176
    , Int176List = Int176List
    , Int176/build = Int176/build
    , Int176List/build = Int176List/build
    , Int176/hex = Int176/hex
    , Int176/fromHex = Int176/fromHex
    , evm/int176 = λ(v : Text) → λ(d : Def) → { _int176 = v, def = d }
    , evm/int176_list = λ(v : Text) → λ(d : Def) → { _int176_list = v, def = d }
    , evm/int176/value = λ(v : Int176) → v._int176
    , evm/int176_list/value = λ(v : Int176List) → v._int176_list
    , evm/int176/Type = Int176
    , evm/int176_list/Type = Int176List
    , Int176/output = Int176/output
    , Int176List/output = Int176List/output
    , Int184 = Int184
    , Int184List = Int184List
    , Int184/build = Int184/build
    , Int184List/build = Int184List/build
    , Int184/hex = Int184/hex
    , Int184/fromHex = Int184/fromHex
    , evm/int184 = λ(v : Text) → λ(d : Def) → { _int184 = v, def = d }
    , evm/int184_list = λ(v : Text) → λ(d : Def) → { _int184_list = v, def = d }
    , evm/int184/value = λ(v : Int184) → v._int184
    , evm/int184_list/value = λ(v : Int184List) → v._int184_list
    , evm/int184/Type = Int184
    , evm/int184_list/Type = Int184List
    , Int184/output = Int184/output
    , Int184List/output = Int184List/output
    , Int192 = Int192
    , Int192List = Int192List
    , Int192/build = Int192/build
    , Int192List/build = Int192List/build
    , Int192/hex = Int192/hex
    , Int192/fromHex = Int192/fromHex
    , evm/int192 = λ(v : Text) → λ(d : Def) → { _int192 = v, def = d }
    , evm/int192_list = λ(v : Text) → λ(d : Def) → { _int192_list = v, def = d }
    , evm/int192/value = λ(v : Int192) → v._int192
    , evm/int192_list/value = λ(v : Int192List) → v._int192_list
    , evm/int192/Type = Int192
    , evm/int192_list/Type = Int192List
    , Int192/output = Int192/output
    , Int192List/output = Int192List/output
    , Int200 = Int200
    , Int200List = Int200List
    , Int200/build = Int200/build
    , Int200List/build = Int200List/build
    , Int200/hex = Int200/hex
    , Int200/fromHex = Int200/fromHex
    , evm/int200 = λ(v : Text) → λ(d : Def) → { _int200 = v, def = d }
    , evm/int200_list = λ(v : Text) → λ(d : Def) → { _int200_list = v, def = d }
    , evm/int200/value = λ(v : Int200) → v._int200
    , evm/int200_list/value = λ(v : Int200List) → v._int200_list
    , evm/int200/Type = Int200
    , evm/int200_list/Type = Int200List
    , Int200/output = Int200/output
    , Int200List/output = Int200List/output
    , Int208 = Int208
    , Int208List = Int208List
    , Int208/build = Int208/build
    , Int208List/build = Int208List/build
    , Int208/hex = Int208/hex
    , Int208/fromHex = Int208/fromHex
    , evm/int208 = λ(v : Text) → λ(d : Def) → { _int208 = v, def = d }
    , evm/int208_list = λ(v : Text) → λ(d : Def) → { _int208_list = v, def = d }
    , evm/int208/value = λ(v : Int208) → v._int208
    , evm/int208_list/value = λ(v : Int208List) → v._int208_list
    , evm/int208/Type = Int208
    , evm/int208_list/Type = Int208List
    , Int208/output = Int208/output
    , Int208List/output = Int208List/output
    , Int216 = Int216
    , Int216List = Int216List
    , Int216/build = Int216/build
    , Int216List/build = Int216List/build
    , Int216/hex = Int216/hex
    , Int216/fromHex = Int216/fromHex
    , evm/int216 = λ(v : Text) → λ(d : Def) → { _int216 = v, def = d }
    , evm/int216_list = λ(v : Text) → λ(d : Def) → { _int216_list = v, def = d }
    , evm/int216/value = λ(v : Int216) → v._int216
    , evm/int216_list/value = λ(v : Int216List) → v._int216_list
    , evm/int216/Type = Int216
    , evm/int216_list/Type = Int216List
    , Int216/output = Int216/output
    , Int216List/output = Int216List/output
    , Int224 = Int224
    , Int224List = Int224List
    , Int224/build = Int224/build
    , Int224List/build = Int224List/build
    , Int224/hex = Int224/hex
    , Int224/fromHex = Int224/fromHex
    , evm/int224 = λ(v : Text) → λ(d : Def) → { _int224 = v, def = d }
    , evm/int224_list = λ(v : Text) → λ(d : Def) → { _int224_list = v, def = d }
    , evm/int224/value = λ(v : Int224) → v._int224
    , evm/int224_list/value = λ(v : Int224List) → v._int224_list
    , evm/int224/Type = Int224
    , evm/int224_list/Type = Int224List
    , Int224/output = Int224/output
    , Int224List/output = Int224List/output
    , Int232 = Int232
    , Int232List = Int232List
    , Int232/build = Int232/build
    , Int232List/build = Int232List/build
    , Int232/hex = Int232/hex
    , Int232/fromHex = Int232/fromHex
    , evm/int232 = λ(v : Text) → λ(d : Def) → { _int232 = v, def = d }
    , evm/int232_list = λ(v : Text) → λ(d : Def) → { _int232_list = v, def = d }
    , evm/int232/value = λ(v : Int232) → v._int232
    , evm/int232_list/value = λ(v : Int232List) → v._int232_list
    , evm/int232/Type = Int232
    , evm/int232_list/Type = Int232List
    , Int232/output = Int232/output
    , Int232List/output = Int232List/output
    , Int240 = Int240
    , Int240List = Int240List
    , Int240/build = Int240/build
    , Int240List/build = Int240List/build
    , Int240/hex = Int240/hex
    , Int240/fromHex = Int240/fromHex
    , evm/int240 = λ(v : Text) → λ(d : Def) → { _int240 = v, def = d }
    , evm/int240_list = λ(v : Text) → λ(d : Def) → { _int240_list = v, def = d }
    , evm/int240/value = λ(v : Int240) → v._int240
    , evm/int240_list/value = λ(v : Int240List) → v._int240_list
    , evm/int240/Type = Int240
    , evm/int240_list/Type = Int240List
    , Int240/output = Int240/output
    , Int240List/output = Int240List/output
    , Int248 = Int248
    , Int248List = Int248List
    , Int248/build = Int248/build
    , Int248List/build = Int248List/build
    , Int248/hex = Int248/hex
    , Int248/fromHex = Int248/fromHex
    , evm/int248 = λ(v : Text) → λ(d : Def) → { _int248 = v, def = d }
    , evm/int248_list = λ(v : Text) → λ(d : Def) → { _int248_list = v, def = d }
    , evm/int248/value = λ(v : Int248) → v._int248
    , evm/int248_list/value = λ(v : Int248List) → v._int248_list
    , evm/int248/Type = Int248
    , evm/int248_list/Type = Int248List
    , Int248/output = Int248/output
    , Int248List/output = Int248List/output
    , Int256 = Int256
    , Int256List = Int256List
    , Int256/build = Int256/build
    , Int256List/build = Int256List/build
    , Int256/hex = Int256/hex
    , Int256/fromHex = Int256/fromHex
    , evm/int256 = λ(v : Text) → λ(d : Def) → { _int256 = v, def = d }
    , evm/int256_list = λ(v : Text) → λ(d : Def) → { _int256_list = v, def = d }
    , evm/int256/value = λ(v : Int256) → v._int256
    , evm/int256_list/value = λ(v : Int256List) → v._int256_list
    , evm/int256/Type = Int256
    , evm/int256_list/Type = Int256List
    , Int256/output = Int256/output
    , Int256List/output = Int256List/output
    }
